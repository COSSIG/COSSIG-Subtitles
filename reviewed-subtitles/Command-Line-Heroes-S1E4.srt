1
00:00:04,640 --> 00:00:11,980
请你想象这样一堵墙：这堵墙从你目之所及的最右侧延伸到最左侧
I want you to imagine a wall. The wall stretches as far as you can see to the right and all the way off to the left.

2
00:00:11,980 --> 00:00:14,331
墙比你高 你无法看见墙背后
It's taller than you, you can't see over it, 

3
00:00:15,025 --> 00:00:18,975
你知道墙的另一侧有很多很多人
and you know there are people on the other side, lots of people.

4
00:00:19,480 --> 00:00:24,720
但你不清楚他们是否和你一样 不清楚他们是敌是友
But you just don't know if they're anything like you. Are they enemies or friends?

5
00:00:25,550 --> 00:00:31,103
开发者创造代码 然后把代码扔过墙丢给运维 
Developers created their code and threw it over the wall to operations,

6
00:00:31,103 --> 00:00:33,103
之后发生的问题都是运维的责任了
 and then it was operations' problem.

7
00:00:33,103 --> 00:00:33,134
之后发生的问题都是运维的责任了

8
00:00:33,400 --> 00:00:37,180
他们随心所欲 并不真正关心服务质量
Just doing whatever they feel like, not really caring about the quality of the service.

9
00:00:37,180 --> 00:00:39,604
墙这两面的人几乎做着相反的工作 
These two sides have almost opposing jobs - 

10
00:00:40,100 --> 00:00:44,189
一方做出改变 另一方尽可能抵制那些改变
 one to make changes and one to resist those changes as much as possible.

11
00:00:44,400 --> 00:00:50,000
但对于他们到底想共同达成什么 却没有在同一幅蓝图中规划过
But there's no talking on the same page about what it actually is they're trying to achieve.

12
00:00:53,580 --> 00:00:56,466
我是 Saron Yitbarek 这里是《代码英雄》
I'm Saron Yitbarek and this is Command Line Heroes, 

13
00:00:56,466 --> 00:00:56,500
an original podcast from Red Hat.

14
00:00:56,500 --> 00:00:58,466
由红帽公司推出的原创播客栏目
an original podcast from Red Hat.

15
00:00:58,640 --> 00:01:03,380
第四期 我们的标题是《DevOps 拆掉那堵墙》
Episode 4, DevOps, tear down that wall.

16
00:01:04,220 --> 00:01:09,380
是的 数十年来 IT 界划分为各种角色
So yeah, for decades the IT world was defined by that division of roles.

17
00:01:09,380 --> 00:01:15,380
一边是开发者 他们要尽可能快地去创造更多变化
You had developers on one side. They were incentivized to create as much change as quickly as possible.

18
00:01:15,380 --> 00:01:18,720
然后另一边是运维团队
And then you had the operations team on the other side.

19
00:01:18,720 --> 00:01:22,580
他们要去阻止太多改变发生
They were incentivized to prevent too much change from happening.

20
00:01:22,580 --> 00:01:26,600
与此同时 代码在没有充分共鸣和沟通的条件下
In the meantime, code was getting tossed blindly over that wall， 

21
00:01:26,600 --> 00:01:29,877
被盲目扔过两方之间的墙
with no real empathy or communication between these two worlds

22
00:01:30,620 --> 00:01:38,880
怎样才能拆掉这堵墙呢？这需要一个重大的转变
What would it take to tear down a wall like that? It would take a seismic shift.

23
00:01:41,850 --> 00:01:50,520
上一期 我们看到了新的敏捷方法论 它重视不间断的迭代改进
Last episode, we saw how new a gile methodologies put a premium on constant iterative improvements

24
00:01:50,520 --> 00:01:51,398
这当然是极好的
And that was great.

25
00:01:51,950 --> 00:01:55,104
然而 这种变化也带来了未曾预料的后果
But with change, comes unintended consequences.

26
00:01:55,692 --> 00:01:58,650
敏捷开发加快了软件更新迭代的速度
Agile increased the rate of changes we were making,

27
00:01:59,075 --> 00:02:03,991
一夜之间 把代码丢到墙的另一端并默念上天保佑的这种做法
but then, suddenly, all that throwing code over the wall and hoping for the best

28
00:02:04,325 --> 00:02:06,325
它的效率突然就跟不上新的开发方式了
it just wasn't fast enough anymore.

29
00:02:07,125 --> 00:02:10,950
开发者和运维都将自己置于封闭、舒适的环境中
In our little silos, you were comfy with the way things were.

30
00:02:11,500 --> 00:02:15,175
但人在封闭的环境中是无法高效地工作的
but siloed people can't get things done as fast as they should.

31
00:02:15,725 --> 00:02:17,725
旧有的工作方式给我们限了速
We' d put a speed limit on ourselves,

32
00:02:18,025 --> 00:02:20,025
因为开发者和运维未曾通力合作
because we weren't working together.

33
00:02:20,525 --> 00:02:25,453
随着时间的推移 效率受限的弊端也越发明显 这是因为…
And that speed limit is getting to be more and more of a problem, because...

34
00:02:25,680 --> 00:02:29,320
因为都是为了更快的将产品推向市场、提高敏捷性
It's all about faster time to market, increased agility

35
00:02:29,320 --> 00:02:33,860
更多的迭代 而不是长期而大量的工作
doing more iterative, rather than longer - term big pieces of work.

36
00:02:33,900 --> 00:02:36,700
Richard Henshall 是 Ansible 的一位产品经理
Richard Henshall is an Ansible product manager.

37
00:02:36,700 --> 00:02:40,980
是的 还记得你以前下单购买服务器 四个月后到货
You know, I remember the days when you put in an order for a server and it turned up four months later.

38
00:02:40,980 --> 00:02:44,350
所有东西都整合在一起 所以整个堆栈是一个整体
Everything was converged together, so that the entire stack was one thing 

39
00:02:44,350 --> 00:02:47,440
要花几年时间来设计和建造那些东西
and it took years for those to be designed and built.

40
00:02:47,440 --> 00:02:51,860
现在这种情况已经不存在了 对于很多组织来说 这种方法已经…
That doesn't fly anymore and it's just disappeared, to the point that it is just…

41
00:02:51,860 --> 00:02:55,920
已经寿终正寝 偶尔拿过来试试 然后放弃它 
it’s up, try it, bring it back down again, for a lot of organizations.

42
00:02:55,920 --> 00:03:01,880
如今 像亚马逊这样的公司每分钟都会部署几次新的代码
These days, a company like Amazon will deploy new code several times every minute.

43
00:03:01,880 --> 00:03:08,380
想象一下 用按部就班的瀑布式工作流 简直不可能完成这些工作
Imagine trying to get that done using some step-by-step waterfall workflow. It's just impossible.

44
00:03:08,380 --> 00:03:13,264
所以为了继续快速完成工作 那些关于稳定性、安全性、可靠性的顾虑
Soon enough, those ops concerns about stability, security, reliability, 

45
00:03:13,264 --> 00:03:16,038
为了跟上迭代的步伐 都会被运维丢到一边不管
will get pushed to the side in favor of moving fast.

46
00:03:16,360 --> 00:03:22,560
同时 开发者也没有意识到他们的责任是创造真实环境可用的代码
Developers meanwhile didn't see it as their responsibility to produce code that worked in the real world.

47
00:03:22,560 --> 00:03:26,300
开发者对稳定性和安全性毫无兴趣
Developers had little interest in stability and security issues, 

48
00:03:26,300 --> 00:03:29,353
但这些恰恰是我们需要解决的问题
but those are very real issues that we need to address.

49
00:03:29,740 --> 00:03:36,140
所以 我们最终会有很多无谓的修改 在双方之间来来回回
So, we end up with a lot of needless revisions down the pipe, back and forth across the divide.

50
00:03:36,140 --> 00:03:39,000
想象一下过度分工会如何拖慢公司效率
Think how much that division can slow a company down.

51
00:03:39,350 --> 00:03:41,081
想象一下这样的效率会多低
Think how inefficient that could get.

52
00:03:41,400 --> 00:03:45,820
但开发法者很少被鼓励思考除代码之外的其他事务
But developers were rarely encouraged to look beyond their own command line.

53
00:03:45,820 --> 00:03:50,000
他们的目录规模只会越来越臃肿
The size of their directories would just grow and grow, 

54
00:03:50,000 --> 00:03:51,659
但他们从不清理
and they would never clean up, 

55
00:03:51,659 --> 00:03:54,404
除非已经无法工作才不得不清理
unless they wouldn't be able to get any work done without cleaning up.

56
00:03:54,900 --> 00:04:00,920
Sandra Henry-Stocker 是位退休的系统管理员 为 IDG 杂志撰稿
Sandra Henry-Stocker is a retired sysadmin who writes for the IDG magazines.

57
00:04:00,920 --> 00:04:06,260
我过去经常劝说别人 说 “嘿 你看 你用了这么多的磁盘空间
I was kind of often having a debate, saying, "Hey look, you're using this much disk space.

58
00:04:06,260 --> 00:04:08,295
是不是有什么东西你可以整理一下
Isn't there something you can get rid of 

59
00:04:08,295 --> 00:04:09,990
这样我们就有更多的存储空间来运行了 
so that we have more space to work,

60
00:04:10,280 --> 00:04:15,260
因为服务器上的存储空间快用完了 ”是的 我们经常经历这些事
because we're running out of space on this server." And yeah, we'd go through that a lot.

61
00:04:15,260 --> 00:04:18,261
归根结底 这是一个心态问题 
Ultimately, this is a mindset problem. 

62
00:04:18,261 --> 00:04:22,098
这种开发者和运维之间的态度分裂 
This divisive attitude between developers and operations, 

63
00:04:22,325 --> 00:04:25,133
一方不必去理解另一方的担忧
where one didn't have to understand the concerns of the other.

64
00:04:25,360 --> 00:04:27,885
好吧 在过去这还没太大问题 
Well, in the past that had been just fine, 

65
00:04:28,275 --> 00:04:33,273
但随着开发速度成为一种重要的优势 这种分裂的文化急需改进
but as speed became a premium that culture became more and more unstable.

66
00:04:33,440 --> 00:04:38,060
孤立在自己的工作圈子里 效率太低了
Being siloed in your work bubble was just way too inefficient.

67
00:04:38,060 --> 00:04:42,460
Jonah Horowitz 在 Stripe 的可靠性工程团队工作
Jonah Horowitz works for the Reliability Engineering team at Stripe.

68
00:04:42,460 --> 00:04:47,209
他描述了即使开发人员和运维人员想一起工作 
He describes how, even if developers and operations had wanted to work together,

69
00:04:47,500 --> 00:04:51,975
他们也无法做到 因为从某种意义上说 他们被安排在对立的团队中
 they couldn't have because in a sense they'd been placed on opposite teams

70
00:04:52,440 --> 00:04:56,474
运维团队经常以正常运行时间和可靠性来衡量 
The operations team is often measured by uptime and reliability, 

71
00:04:57,175 --> 00:05:00,621
而提高正常运行时间的最大方法之一
and one of the biggest ways to increase uptime is to decrease the amount of change in the system.

72
00:05:00,621 --> 00:05:04,125
就是减少系统的变化量
and one of the biggest ways to increase uptime is to decrease the amount of change in the system.

73
00:05:04,800 --> 00:05:08,251
当然 发布新功能就是在改变系统 
But of course, releasing new features is changing the system, 

74
00:05:08,251 --> 00:05:11,875
而做产品工作的软件工程师有动力去尽快发布尽可能多的功能
and the software engineers who are doing product work 

75
00:05:11,875 --> 00:05:18,052
而做产品工作的软件工程师有动力去尽快发布尽可能多的功能
are incentivized to ship as many features as quickly as possible.

76
00:05:18,220 --> 00:05:23,620
所以 当开发和运维的职责不同时 他们自然有了冲突
So you set up this conflict between dev and ops when you've got these separate roles.

77
00:05:24,660 --> 00:05:29,793
开发者致力于新建功能 运营致力于维持运行 
Developers committed to building features. Operations committed to keeping the site working. 

78
00:05:30,220 --> 00:05:32,220
两者目标相互矛盾
Two goals at odds with each other.

79
00:05:32,220 --> 00:05:35,860
但就像我说的 由于对速度的需求越来越大
But like I said, because of the increasing need for speed, 

80
00:05:35,860 --> 00:05:37,982
对快速迭代发布的需求越来越大 
for iterative rapid-fire releases,

81
00:05:39,050 --> 00:05:42,950
开发和运维之间的脱节已经到了一个临界点 
 this disconnect between dev and ops was reaching a crisis point

82
00:05:43,725 --> 00:05:45,725
必须要有所改变
 and something had to give.

83
00:05:52,700 --> 00:05:59,960
在 2009 年左右 将开发和运维分开的那堵墙看起来像是监狱的墙
Around 2009, the wall dividing dev and ops was looking a lot more like a prison wall than anything else.

84
00:05:59,960 --> 00:06:02,407
我们需要的是一种新的方法论
What we needed was a new methodology 

85
00:06:02,725 --> 00:06:05,733
它能使开发和运维之间的隔阂顺畅过渡
that would smooth the transition from development to operations,

86
00:06:06,020 --> 00:06:10,480
让双方以更快、更整体化的方式工作
allowing both sides to work in a faster, more holistic way.

87
00:06:10,480 --> 00:06:14,843
视频平台 Small Town Heroes 的首席技术官 Patrick Debois 
Patrick Debois, CTO of the video platform Small Town Heroes, 

88
00:06:15,300 --> 00:06:18,600
为想要拆掉这堵墙的人发起了一场会议
launched a conference for people who wanted to tear down that wall.

89
00:06:18,900 --> 00:06:21,840
他把这个脑洞叫做 DevOps Days（开发运维日）
He called his brain child DevOps Days.

90
00:06:21,840 --> 00:06:26,600
为了便利 他将其缩短为 DevOps 于是这场改革就有了名字
and thus the movement was given a name.

91
00:06:27,720 --> 00:06:29,946
不过名字并不代表改革的一步
But a name is not a process, 

92
00:06:30,475 --> 00:06:33,627
 我们知道为什么我们需要 DevOps 但究竟该如何做
it was clear why DevOps was needed, but how would it work?

93
00:06:33,860 --> 00:06:38,580
我们应该如何将开发和运维结合起来而不引发战争
How are we supposed to bring dev and ops together without starting a war?

94
00:06:40,220 --> 00:06:43,360
幸运的是 我有 Scott Hanselman 来指导我
Thankfully, I have Scott Hanselman to walk me through this.

95
00:06:43,360 --> 00:06:48,520
Scott 是微软 .NET 和 ASP.NET 的首席项目经理
Scott's the principal program manager for .NET and ASP.NET at Microsoft.

96
00:06:48,520 --> 00:06:54,025
所以 Scott 我认识你确实有几年了 但感觉还是相见恨晚啊
So Scott, I've known you for, I feel like I've known for forever, definitely a few years. (Forever. )

97
00:06:54,450 --> 00:06:59,661
我想和你聊聊你如何成为一个开发者 
I want to talk to you about the relationship between being a developer 

98
00:06:59,661 --> 00:07:03,200
和 DevOps 这些年的变化 觉得如何？
and what DevOps has looked like over the years. How does that sound?

99
00:07:04,000 --> 00:07:05,480
嗯 听上去挺有意思
Yeah, that sounds like a plan.

100
00:07:05,480 --> 00:07:10,625
好的 我认为究竟什么是 DevOps 是一个好的开场问题 
Okay. So I think a good place to start is just defining what DevOps is.

101
00:07:10,625 --> 00:07:11,735
你会怎么定义它呢？
 How would you describe it?

102
00:07:12,575 --> 00:07:18,755
在 2008 年 维基百科有个关于 DevOps 的定义确实很棒
The Wikipedia entry from 2008 that defines DevOps is actually very good.

103
00:07:18,945 --> 00:07:18,950
它说 这是一套“惯例” 

104
00:07:18,950 --> 00:07:20,821
它说 这是一套“惯例” 
So, it's a set of practices 

105
00:07:20,821 --> 00:07:20,826
So, it's a set of practices 

106
00:07:21,259 --> 00:07:23,765
目的是在保证质量的前提下 缩短提交变更和变更投入生产之间的时间
that is intended to reduce the time 

107
00:07:23,765 --> 00:07:24,125
目的是在保证质量的前提下 缩短提交变更和变更投入生产之间的时间

108
00:07:24,125 --> 00:07:25,825
目的是在保证质量的前提下 缩短提交变更和变更投入生产之间的时间
between committing a change 

109
00:07:25,825 --> 00:07:26,675
目的是在保证质量的前提下 缩短提交变更和变更投入生产之间的时间

110
00:07:26,675 --> 00:07:31,200
目的是在保证质量的前提下 缩短提交变更和变更投入生产之间的时间
and that change going into production while ensuring quality.

111
00:07:31,540 --> 00:07:34,960
所以 如果你想想 假如今天是周二 我检查了一些代码
So if you think about, hey, I checked in some code.

112
00:07:34,960 --> 00:07:39,760
而这些代码将在 6 月的版本中上线 这就很糟糕了
It's Tuesday and that will be going out in the June release. That sucks.

113
00:07:39,760 --> 00:07:47,420
因为这不是持续集成 而是一年几次的集成
That would be not continuous integration. That would be a couple-of-times-a-year integration.

114
00:07:48,857 --> 00:07:51,825
如果你有一个健康的 DevOps 体系 
If you have a good healthy DevOps system, 

115
00:07:51,825 --> 00:07:54,273
如果你已经有“设置 – 上线(set – up)”的惯例
if you've done the set - up practices, 

116
00:07:54,525 --> 00:07:57,647
 那么你就可以不断地将代码集成到生产中去
then you are going to be continuously integrating into production.

117
00:07:58,080 --> 00:08:00,620
那么 你能做什么
So it's, what can you do?

118
00:08:00,620 --> 00:08:05,350
你可以定义、创造怎样是最佳“惯例” 这将决定你能否成功
What best practices can you define, can you create, that will allow you to get it?

119
00:08:05,580 --> 00:08:10,540
所以 我在周二检查的一些代码 周四就上线了
So, I checked in some code on Tuesday and it's in production on Thursday.

120
00:08:11,168 --> 00:08:16,160
那么现在 为了保证高质量 最重要的事情就会是 - 谨慎上线
Now here's the important part—pause for effect—while ensuring high quality.

121
00:08:17,282 --> 00:08:21,960
这个定义真的很有趣呢 是个“惯例”
So what's really interesting about that definition is it's a set of practices

122
00:08:21,960 --> 00:08:29,280
但我觉得当我听人们谈论 DevOps 时 它具体一点
but I feel like when I hear people talk about DevOps , it's a little bit more crystallized, I guess

123
00:08:29,280 --> 00:08:33,900
他们谈论它就像它是一个角色、一个工作、一个职位或一个头衔
They talk about it like it's a role, a job, a position, a title.

124
00:08:33,900 --> 00:08:36,980
你觉得这与它是一套“惯例”的观点是否有冲突？
Does that conflict with the idea that it's a set of practices?

125
00:08:36,980 --> 00:08:42,083
我认为 当一套新的方法或一个新的流行语出现时 
I think that when a new set of practices or a new buzzword comes out, 

126
00:08:42,550 --> 00:08:44,975
人们喜欢把它加在名片上
people like to put it on a business card.

127
00:08:45,300 --> 00:08:48,775
我不是不尊重那些正在收听这个播客
No disrespect to people who are listening to this podcast 

128
00:08:48,775 --> 00:08:51,445
 并且感到被我冒犯、正把名片掏出来看的人们
and now are offended and looking at their business card and going, 

129
00:08:52,100 --> 00:08:52,675
“你开什么玩笑”
"This sucks."

130
00:08:53,075 --> 00:08:56,795
虽然 他们现在可能正要怒盖笔电、退出这个播客
And now they're going to like, I don't know, slam their laptop shut, rage, quit this podcast.

131
00:08:57,380 --> 00:09:00,245
有一个帖子写得非常好 作者是 Brian Guthrie 
There was a really great thread by Brian Guthrie, 

132
00:09:00,525 --> 00:09:04,760
他是一个脑力劳动者 在 SoundCloud 工作
who is a thought worker, and he worked at SoundCloud.

133
00:09:04,760 --> 00:09:06,200
他聊到过 DevOps 
He talked about DevOps

134
00:09:06,200 --> 00:09:10,440
他说 DevOps 就是一套惯例 不是什么别的
 and he said that DevOps is a set of practices, period.

135
00:09:10,440 --> 00:09:13,300
不是一个工作头衔、不是一个软件工具
It's not a job title. It's not a software tool. 

136
00:09:13,300 --> 00:09:16,140
不是一个你安装的东西、也不是一个团队的名字
It's not a thing you install. It's not a team name.

137
00:09:16,140 --> 00:09:20,060
他的原话是：“DevOps 不是神奇的‘企业万能药’”
The way he phrased it was, "It's not magic enterprise fairy dust."

138
00:09:20,060 --> 00:09:24,620
如果你没有好的惯例 如果你没有良好的习惯 你就没有 DevOps
If you don't have best practices, if you don't have good practices, you have no DevOps

139
00:09:24,620 --> 00:09:30,260
所以 这更多的是一种心态 而不是摆出一个工作头衔 然后
So it's more a mindset than it is putting out a job title and like,

140
00:09:30,260 --> 00:09:31,631
“我们要雇佣一个 DevOps 工程师 
"We're going to a hire DevOps engineers 

141
00:09:32,000 --> 00:09:35,792
然后我们要把这些神奇的 DevOps 工程师撒到组织中”
and then we're going to sprinkle these magical DevOps engineers into the organization"

142
00:09:36,100 --> 00:09:42,780
“虽然整个组织没有意志力 也没有信奉 DevOps 的想法 ”
"without the organization having organizational willpower and buying into the mindset that is DevOps ."

143
00:09:42,800 --> 00:09:45,097
所以 如果你认为 DevOps 是一个工具或者是用来安装的东西 
So, if you think it's a toolkit or a thing you install,

144
00:09:45,400 --> 00:09:47,400
那么你就完全理解错了
 then you've missed the point.

145
00:09:47,540 --> 00:09:52,440
好吧 让我们回到过去 在 DevOps 这个名词出现之前
Okay, so let's go back in time, before DevOps was a term

146
00:09:52,440 --> 00:09:58,620
在我们往名片上写 DevOps 或者把它作为一套“惯例”来讨论之前
before we had DevOps on our business cards or talked about it as a set of practices

147
00:09:58,620 --> 00:10:02,619
在 10 年前 你会如何描述开发者和那些运维人员之间的关系？
10 years ago, how would you describe the relationship between developers 

148
00:10:02,619 --> 00:10:02,939
在 10 年前 你会如何描述开发者和那些运维人员之间的关系？

149
00:10:02,939 --> 00:10:05,925
在 10 年前 你会如何描述开发者和那些运维人员之间的关系？
and those people who are on the ops side of things?

150
00:10:05,925 --> 00:10:06,280
在 10 年前 你会如何描述开发者和那些运维人员之间的关系？

151
00:10:06,280 --> 00:10:08,020
那是相当的水火不容
It was rather combative.

152
00:10:08,020 --> 00:10:15,040
举个例子 运维控制着生产 但开发人员从来没有接近过生产
Like, the people in ops controlled production, and developers never got near production.

153
00:10:15,475 --> 00:10:21,340
我们站在一堵不透明的墙的两侧
We were on different sides of a wall that was an opaque wall.

154
00:10:21,340 --> 00:10:23,106
我们在进行开发的时候
We, over in development, 

155
00:10:23,106 --> 00:10:27,610
会尽可能地去模拟出生产环境
tried as much as we could to make something that looked like production,

156
00:10:28,125 --> 00:10:29,575
但实际上从来没有…
 but you never actually ...

157
00:10:30,020 --> 00:10:31,440
那和生产环境总是相差甚远
it never looks like production.

158
00:10:31,440 --> 00:10:32,460
我们有相当多问题
We had a couple of issues.

159
00:10:32,460 --> 00:10:36,700
我们的开发环境从各个方面来说都不像生产环境
We had development environments that didn't look or feel or smell like production

160
00:10:36,700 --> 00:10:39,020
所以你不可避免地会遇到那些
so inevitably you'd have those

161
00:10:39,020 --> 00:10:43,280
“嘿 它在生产环境中的工作方式和在开发环境中的不同”的问题
Hey, it works different in production than it does in development," kind of environments

162
00:10:43,280 --> 00:10:48,075
然后 从开发到投入生产之间的间距
And then, the distance between the check-in and when it got into production 

163
00:10:48,075 --> 00:10:49,550
是几周几周的长久间隔
was weeks and weeks and weeks

164
00:10:49,800 --> 00:10:53,920
所以你的大脑甚至不在正确的频道上
so your brain wasn't even in the right headspace

165
00:10:53,920 --> 00:10:58,980
比如说 我在一月份的时候就在研究这个功能 现在四月份才刚刚上线
Because I worked on that feature in January and it's just now rolling out in April

166
00:10:58,980 --> 00:11:01,956
那么当 bug 不可避免地出现的时候 
so then when the bug inevitably comes down,

167
00:11:02,400 --> 00:11:06,425
要等到六月份才能修复 我甚至不记得我们之前在干嘛
 it's not going to be fixed until June and I don't even remember what we were talking about

168
00:11:08,140 --> 00:11:10,999
所以运维团队的人 
So people in ops, 

169
00:11:10,999 --> 00:11:14,225
他们的工作几乎就是有意识地让我们慢下来
It was almost like their job was to consciously slow us down

170
00:11:14,600 --> 00:11:17,340
好像他们的存在是为了让开发人员更慢
Like, they existed to make developers slower

171
00:11:17,340 --> 00:11:21,340
然后他们还觉得我们随时会让生产环境崩坏
and then of course they felt that we wanted to break production at all times.

172
00:11:21,340 --> 00:11:23,800
那么为什么会这样呢？
So why was it like that?

173
00:11:23,800 --> 00:11:29,820
是对开发者想要做什么和他们做了什么不了解
Was it just a fundamental misunderstanding of what developers wanted and were trying to do?

174
00:11:29,820 --> 00:11:31,300
还是信任问题？
Was it a trust issue?

175
00:11:31,300 --> 00:11:33,620
为什么会有这么大的冲突？
Why was it so combative?

176
00:11:33,975 --> 00:11:36,020
我觉得你已经回答了 而且回答得很到位
I think that you answered, you nailed that

177
00:11:36,020 --> 00:11:38,540
你说的很对 确实是信任的问题
You answered it all correctly. There was a trust issue.

178
00:11:38,800 --> 00:11:43,680
我觉得开发人员认为他们是特殊的
There was a sense I think that developers thought they were special

179
00:11:43,720 --> 00:11:45,820
或者某些方面比 IT 人员更优越
or somehow better than IT people

180
00:11:45,820 --> 00:11:49,200
而 IT 人员认为开发人员不尊重生产
and IT people thought that developers had no respect for production

181
00:11:49,760 --> 00:11:53,700
我认为这种文化的产生 一部分来源于高层
I think that that culture came kind of from the top

182
00:11:53,700 --> 00:11:57,800
他们认为我们是不同的组织 并且我们的目标也不同
the idea that we were different orgs and that somehow our goals were different

183
00:11:58,948 --> 00:12:01,380
我认为软件业正在走向成熟
I think that there's some maturity that's happened in software

184
00:12:01,380 --> 00:12:02,300
因为我们都意识到 
where we all realized 

185
00:12:02,300 --> 00:12:07,114
无论业务是什么 我们写软件都是为了推动业务发展
that we write software in order to move the business forward, whatever that business is

186
00:12:07,440 --> 00:12:11,540
所以现在有种 “我们都在往正确的方向推进” 的感觉
So that sense of, "We're all pushing in the right direction,"

187
00:12:11,560 --> 00:12:12,550
但这是需要绝对的信任
But it was definitely trust, 

188
00:12:12,550 --> 00:12:18,170
 可 DevOps 工程师不信任产品工程师来部署代码
because DevOps engineers don't trust product engineers to deploy

189
00:12:18,700 --> 00:12:18,720
And no one understood the deployment process

190
00:12:18,720 --> 00:12:21,020
没有人理解部署过程
And no one understood the deployment process

191
00:12:21,020 --> 00:12:21,040
没有人理解部署过程

192
00:12:21,040 --> 00:12:26,960
人们只信任自己 他们的心态…
and people trusted only themselves, and they also ...

193
00:12:26,960 --> 00:12:28,940
举个例子 就像“我只信任自己的工作”
Like, "I only trust myself to go into production."

194
00:12:28,940 --> 00:12:30,585
“我不能相信 Saron 的工作 
"I can't trust Saron to go into production, 

195
00:12:30,585 --> 00:12:32,585
她甚至不知道她在干些什么 我会做完所有的事情 ”
she doesn't know what she's talking about. I'll do it."

196
00:12:33,080 --> 00:12:35,836
所以如果没有人真正理解这个系统
So if no one truly understood the system,

197
00:12:35,836 --> 00:12:39,658
就像全栈工程师的概念 已经成为一个传说了
 like the idea of a full stack engineer was a mythic thing

198
00:12:40,875 --> 00:12:46,360
但是现在 我们开始将一整个组织称之为全栈
But now, we are starting to think about the whole stack as an organization

199
00:12:46,360 --> 00:12:51,620
我们已经有了“全产品所有权”这样的名词
We've had terms like full product ownership

200
00:12:51,620 --> 00:12:55,500
敏捷方法论也出现了 也就是说每个人都应该拥有产品
and the agile methodology has come along saying that everyone should own the product

201
00:12:55,500 --> 00:13:02,040
社区对于软件所有权和对于代码的想法都慢慢发生了变化
and that sense of community ownership and community around the code all slowly changed

202
00:13:02,040 --> 00:13:04,740
这种改变带来了一个充满信任的环境
changes things to bring an environment of trust

203
00:13:14,020 --> 00:13:17,206
我是 Saron Yitbarek 你现在收听的是《代码英雄》
I'm Saron Yitbarek and you're listening to Command Line Heroes,

204
00:13:17,206 --> 00:13:19,206
 来自红帽公司的一档原创播客栏目
 an original podcast from Red Hat

205
00:13:21,060 --> 00:13:23,174
所以 要想让 DevOps 发挥出它的潜力 
So, for DevOps to hit its potential 

206
00:13:23,174 --> 00:13:26,438
我们就需要双方更加信任彼此
we were going to need a lot of trust on both sides

207
00:13:26,660 --> 00:13:28,760
这就意味着要有更多的沟通
and that means a lot more communication

208
00:13:29,350 --> 00:13:30,860
回到 Richard Henshall 身上
Back to Richard Henshall

209
00:13:30,860 --> 00:13:35,680
他认为双方的共情是 DevOps 的基石
He sees empathy for both sides as the cornerstone of DevOps

210
00:13:36,300 --> 00:13:40,680
一些 DevOps 的从业者 一群真正优秀的从业者 都参与过这两种角色
Some of the DevOps practitioners, some of the really good ones, have done both roles

211
00:13:41,100 --> 00:13:43,960
我认为这才是真正的力量所在
I think that is where the real power comes

212
00:13:43,960 --> 00:13:47,020
当人们真正做过了两种角色 而不是只看到其中一种
is when people actually get to do both roles, rather than just seeing the other side

213
00:13:47,020 --> 00:13:50,280
所以 你不该保持孤立 你实际上…
So you don't keep the separation, you're actually...

214
00:13:50,525 --> 00:13:53,920
你应该去和双方都一起工作一段时间
You go and live in their shoes for a period of time.

215
00:13:53,920 --> 00:13:57,380
我想这才是让人恢复同理心的方法
I think that's what brings the empathy back

216
00:13:57,700 --> 00:14:02,020
现在 这不仅仅是为了温情的沟通
Now this isn't just communication for the sake of warm fuzzies.

217
00:14:02,020 --> 00:14:07,300
Richard Henshall 所描述的是行业重点的转向 - Scott 刚刚提到过
What Richard Henshall is describing is the industry swerving toward that focus Scott mentioned.

218
00:14:07,300 --> 00:14:10,160
一个关于持续集成的观点
A focus on continuous integration

219
00:14:10,160 --> 00:14:15,180
软件不仅要以小批量快速编写和发布
Software was going to be, not just written and released in small rapid-fire batches

220
00:14:15,180 --> 00:14:18,260
还要以小批量进行快速测试
but also tested in small rapid-fire batches

221
00:14:18,260 --> 00:14:21,460
这意味着 开发人员需要得到即时反馈
And that meant, developers needed instant feedback 

222
00:14:21,460 --> 00:14:24,799
不管是对于他们正在编写的代码 还是代码在现实世界中的表现
on the code they were writing, and how it would perform in the real world

223
00:14:25,450 --> 00:14:29,600
随着上市时间从几个月缩短到几天 再到几个小时
As time to market shrank from months to days, to hours

224
00:14:29,600 --> 00:14:35,340
我们四处寻找一套新的工具 可以将任何可以自动化的元素自动化
we cast around for a new set of tools that could automate any element that could be automated.

225
00:14:35,650 --> 00:14:39,700
你需要一个全新的生态系统和工具
You really need a whole new ecosystem of tooling

226
00:14:39,700 --> 00:14:42,360
来最有效地进行
DevOpsto do DevOps most effectively

227
00:14:42,360 --> 00:14:45,140
Gordon Haff 是一位红帽公司高级工程师
Gordon Haff is a senior manager at Red Hat.

228
00:14:45,375 --> 00:14:55,220
我们看到有很多巨大的、DevOps 可以利用的新种集合工具和平台
What we see is this huge collection of new types of tooling and platforms that DevOps can make use of.

229
00:14:55,220 --> 00:14:57,920
它们都诞生于开源
They're really all coming out of open source.

230
00:14:57,920 --> 00:14:59,000
Gordon 是对的
Gordon's right

231
00:14:59,000 --> 00:15:01,760
新的集合工具是很庞大
The collection of new tools is huge

232
00:15:01,760 --> 00:15:04,220
关于开源这点他说的也对
and he's right about the open source angle too

233
00:15:04,220 --> 00:15:09,620
在一个严格的专有系统中 自动化工具是不可能发展的
The growth of automation tools never would have been possible in a strictly proprietary system

234
00:15:09,620 --> 00:15:14,280
其中有很多监控工具
Lot of monitoring tools out there

235
00:15:14,280 --> 00:15:16,660
Prometheus 是其中一个常见的工具
Prometheus is a common one

236
00:15:16,660 --> 00:15:25,420
它开始引起很多人兴趣 用于编排服务的 STO 也出自这里
STO for service orchestration is starting to interest a lot of people, so that's out there

237
00:15:25,420 --> 00:15:27,380
GitHub 让你跟踪变化
GitHub let's you track changes

238
00:15:27,380 --> 00:15:29,780
PagerDuty 管理数字业务
PagerDuty manages digital operations

239
00:15:29,780 --> 00:15:32,660
NFS 可以跨网络挂载文件系统
NFS mounts file systems across a network

240
00:15:32,660 --> 00:15:35,940
Jenkins 让你自动测试你的构建
Jenkins lets you automate testing on your build

241
00:15:36,350 --> 00:15:38,760
这么多工具 这么多自动化流程
So many tools, so much automation

242
00:15:38,760 --> 00:15:42,140
最终的结果是 开发人员可以将他们的变更直接推送到生产现场
The end result, developers can push their changes live

243
00:15:42,140 --> 00:15:48,480
自动创建构造 实行经过严格管理的编译与针对性的自动测试
the build is automatically created, compilation is managed, and automated tests are run against it

244
00:15:48,480 --> 00:15:52,200
Sandra Henry-Stocker 描述了这是怎样的变化
Sandra Henry-Stocker describes what a change this made

245
00:15:52,740 --> 00:15:58,880
所以 我可以把我正在工作编写的东西快速部署
So I could take something that I was working on and rapidly deploy it

246
00:15:58,900 --> 00:16:04,640
我可以只在一个系统上 通过命令行控制许多系统
and I could control many systems just from the command line on one

247
00:16:04,640 --> 00:16:07,840
而不是必须在在很多不同的系统上工作
rather than having to work at a lot of different places

248
00:16:07,840 --> 00:16:11,404
也不用学习就可以利用网络 将代码部署到其他机器上
or wonder how I was going to get something that I was working on 

249
00:16:11,404 --> 00:16:11,850
也不用学习就可以利用网络 将代码部署到其他机器上

250
00:16:11,850 --> 00:16:15,700
也不用学习就可以利用网络 将代码部署到其他机器上
sent across a network and deployed on a lot of different machines.

251
00:16:15,700 --> 00:16:19,580
现在 在计算机系统中进行改动更容易了
It became easier to basically sit in one spot

252
00:16:19,580 --> 00:16:24,700
坐在一个地方 就能实行一切操作
and yet make my changes across a wide range of computer systems

253
00:16:25,125 --> 00:16:28,020
自动化工具已经解决了速度问题
Automation tools had solved the speed problem

254
00:16:28,425 --> 00:16:33,280
但我不希望我们只赞美工具 而忽略了实际的方法论
But I don't want us to just praise tools at the expense of the actual methodology

255
00:16:33,782 --> 00:16:36,406
Scott Hanselman 和我谈到了这个微妙的界限
Scott Hanselman and I talked about that fine line

256
00:16:37,375 --> 00:16:41,014
你在这次谈话开始时说 DevOps 是一套惯例 
You started this conversation by saying DevOps is a set of practices,

257
00:16:41,014 --> 00:16:43,520
是一种心态 是一种思维方式
 it's a mindset, it's a way of thinking

258
00:16:43,520 --> 00:16:49,087
听起来 我们创造的工具是我们应该思考和操作方式的具体代码实现
It sounds like the tools that we created are the manifestation, 

259
00:16:49,087 --> 00:16:53,225
听起来 我们创造的工具是我们应该思考和操作方式的具体代码实现
the code version of the way we should be thinking and we should be operating.

260
00:16:53,925 --> 00:16:55,360
我喜欢这句话 你真是个天才
I love that, you're a genius

261
00:16:55,360 --> 00:17:01,600
没错 以前 我们的项目组长在 Word 文档中
Exactly. We used to have the product owners write in these Word documents 

262
00:17:02,125 --> 00:17:04,079
写下这些代码是如何工作的
about how the code should work

263
00:17:04,079 --> 00:17:05,920
他们写的是规范 对吧?
They write the spec, right?

264
00:17:05,960 --> 00:17:10,040
这些文档过期了吗？
When was the last time a Word document broke the build?

265
00:17:10,040 --> 00:17:14,079
好吧 我只是很高兴 Scott 刚才说我是天才
Okay, partly I just wanted you to hear Scott calling me a genius

266
00:17:14,079 --> 00:17:18,220
但我也确实认为 这些工具几乎是我们文化转变的象征
But I do think those tools are almost like symbols of our cultural shift

267
00:17:18,220 --> 00:17:20,880
它们鼓励我们拓宽我们的角色定义
They encourage us to broaden our roles

268
00:17:20,880 --> 00:17:22,980
我们开发者已经被迫
We developers have been forced to look

269
00:17:22,980 --> 00:17:25,480
至少偶尔关注代码的运行
at least occasionally, from the command line

270
00:17:25,480 --> 00:17:30,220
这样一来 开发和运维的主要职责就部分统一了
That way the priorities of dev and ops partly come into alignment

271
00:17:30,220 --> 00:17:36,180
事实上 DevOps 的兴起告诉我们的是 在一个速度不断提升的世界里
In fact, what the rise of DevOps has made clear is that in a world of ever-increasing speed

272
00:17:36,180 --> 00:17:38,940
没有人能够保持孤岛状态
nobody can afford to remain siloed

273
00:17:39,725 --> 00:17:42,980
Jonah Horowitz 曾在湾区多家公司工作
Jonah Horowitz has worked for a number of Bay-area companies

274
00:17:42,980 --> 00:17:44,980
包括 Quantcast 和 Netflix
including Quantcast and Netflix

275
00:17:44,980 --> 00:17:48,260
他说即使是世界上一些最大的公司
He explains how even some of the largest companies in the world

276
00:17:48,260 --> 00:17:50,925
也从这个角度重新塑造了他们的文化
have re-imagined their culture in this light.

277
00:17:52,012 --> 00:17:55,660
我们在文化上得到了整个公司的认同 就像
We had sort of this cultural buy-in from the entire company, that was like

278
00:17:55,660 --> 00:17:58,320
“这就是我们要部署软件的方式”
"This is how we're going to deploy software"

279
00:17:58,320 --> 00:18:00,060
“我们将以小批量的方式进行部署:”
"We're going to do it in these small batches"

280
00:18:00,060 --> 00:18:02,500
"我们将使用这些程序帮助部署 ”
"We're going to do it using these deployment procedures."

281
00:18:02,925 --> 00:18:08,600
如果这只是运维团队的行动 我不认为它可以成功
I don't think it can be successful if it's just being driven by the ops team.

282
00:18:09,225 --> 00:18:15,280
这必须成为公司的管理层和领导层所认同的东西才能发挥作用
It has to be something that the management and leadership at the company buy into

283
00:18:15,725 --> 00:18:17,200
而这件事很大程度上 意味着一种文化转变
It's very much a cultural shift

284
00:18:18,280 --> 00:18:22,600
当 MacKenzie 对 800 名 CIO 和 IT 高管进行调查时
When MacKenzie surveyed 800 CIOs and IT executives

285
00:18:22,600 --> 00:18:27,080
80% 的人表示 他们正在规划让自己的一部分下属组织实施 DevOps
80% said they were implementing DevOps in some part of their organization

286
00:18:27,080 --> 00:18:30,940
超过一半的人计划到 2020 年在全公司范围内实施
and more than half planned to implement it company-wide by 2020

287
00:18:31,350 --> 00:18:35,969
高管们意识到 自动化工具可以提升交付速度
Executives are realizing that automation tools ramp up the speed of delivery.

288
00:18:37,300 --> 00:18:41,900
这些人过去也是这样的人 他们习惯于让一个货板先到达数据中心
These are the same people who used to be okay with having a pallet arrive in a datacenter

289
00:18:41,900 --> 00:18:46,400
然后在新机器上线之前让它在那里放上整整一个月
and then have it sit there for a whole month before a new machine was brought online

290
00:18:46,400 --> 00:18:50,000
不过在今天 如果你等待的时间超过 10 分钟
Today, if you're waiting longer than 10 minutes to have something provisioned

291
00:18:50,000 --> 00:18:51,380
就说明你做错了什么
you're doing something wrong

292
00:18:51,380 --> 00:18:55,663
随着竞争对手的速度增加 没有人能够承受得起落后
With competitors hitting speeds like that, nobody can afford to be left behind.

293
00:19:02,680 --> 00:19:06,040
我可以想象 运维团队一定很紧张
I can imagine that ops teams must have been nervous

294
00:19:06,040 --> 00:19:08,880
因为他们把所有的工具都交给开发人员
handing all those tools over to developers

295
00:19:08,880 --> 00:19:10,820
运维团队习惯了做成年人
Ops was used to being the grownup

296
00:19:10,820 --> 00:19:14,000
而现在叫他们把车钥匙交给一贯的孩子 - 开发人员？
and now they were supposed to hand over the keys to the car?

297
00:19:14,000 --> 00:19:19,360
呀 我想我们开发人员正在学习 如何在不破坏东西的前提下快速移动
Yikes. I think we developers are learning to move fast without breaking things.

298
00:19:19,360 --> 00:19:22,280
但随着 DevOps 革命的尘埃落定
But as the dust settles on the DevOps revolution

299
00:19:22,280 --> 00:19:25,100
变化最大的可能是运维团队
the biggest changes may be for the ops team

300
00:19:25,400 --> 00:19:28,680
DevOps 是否真的威胁到了运维的存在？
Does DevOps actually threaten the role of operations?

301
00:19:28,680 --> 00:19:32,420
开发是否在用它闪亮的新工具来吃掉运维？
Is dev using its shiny new tools to eat ops?

302
00:19:32,420 --> 00:19:34,545
Cindy Sridharan 是一位开发者 
Cindy Sridharan is a developer 

303
00:19:34,545 --> 00:19:37,249
她写了一篇长篇调查文章来讨论这些问题
who wrote a long investigative piece about all this

304
00:19:39,295 --> 00:19:42,540
在你的文章和博客中
In your article and your blog post, you mentioned that

305
00:19:42,540 --> 00:19:46,600
你提到运维人员对事情这样的发展并不一定满意
operations people were not necessarily happy with the way things were going

306
00:19:46,600 --> 00:19:48,240
到底发生了什么？你会说什么？
What was going on? What would you say?

307
00:19:48,575 --> 00:19:53,960
这么说吧 DevOps 的理想是责任共享
Let's put it this way, the DevOps ideal was that responsibilities will be shared

308
00:19:53,960 --> 00:19:58,280
开发者和运维将有 就像你知道的 更多的是五五分成
That developers and operations would have, like you know, more of a 50-50 split

309
00:19:58,280 --> 00:20:04,480
以真正确保软件的整体交付
for really ensuring the holistic delivery of software.

310
00:20:04,480 --> 00:20:08,660
我认为很多运维工程师的不快乐源于这样一个事实
I think a lot of the unhappiness from engineers, from operations engineers

311
00:20:08,660 --> 00:20:11,800
那就是这些改变都没有实际功效
stems from the fact that that is not really the reality on the ground

312
00:20:11,800 --> 00:20:16,840
他们仍然是总被鸡蛋挑骨头的人
and that they're still the ones who are always picking the short straw

313
00:20:16,840 --> 00:20:21,000
他们仍然是总做苦力工作的那些人
They're still the ones who are sort like always doing the grunt work

314
00:20:21,000 --> 00:20:27,160
他们还是那些主要肩负着实际运行应用的责任的人
They're still the ones who are primarily shouldering responsibility for actually running the applications

315
00:20:27,160 --> 00:20:29,477
而开发者不一定要做得足够好
and the developers aren't necessarily doing enough

316
00:20:30,517 --> 00:20:33,520
这个问题在未来几年将至关重要
The question will be a crucial one over the next few years

317
00:20:33,520 --> 00:20:35,880
DevOps 的作用到底有多大?
how opsy is DevOps going to be?

318
00:20:35,880 --> 00:20:40,193
随着我们的自动化进程 运维的作用是会被削弱 还是会发生转变？
As we automate, does the role of ops get diminished, or does it transform?

319
00:20:42,125 --> 00:20:46,000
或许旧项目的维护会被自动化
Maybe the responsibility of older Ops will get automated,

320
00:20:46,000 --> 00:20:49,075
如此 他们的运维团队就能协助新服务的开发
so their teams can focus on creating new services,

321
00:20:49,475 --> 00:20:51,475
而不用受困于原本的项目
Instead of just maintaining old ones.

322
00:20:52,575 --> 00:20:56,140
无论如何 可以确信 运维的工作也在演化
However, the Ops' role evolves. This much is clear.

323
00:20:56,140 --> 00:21:00,120
这种方法论实际上是在塑造技术
The DevOps methodology is actually shaping the tech

324
00:21:00,120 --> 00:21:03,460
反过来技术也在塑造方法论
and in turn the tech is shaping the methodology

325
00:21:03,875 --> 00:21:06,120
这样就有了一个神奇的反馈循环
There's this amazing feedback loop

326
00:21:06,120 --> 00:21:10,340
文化造就了工具 而工具又强化了文化
Culture makes the tools, and the tools reinforce the culture.

327
00:21:11,800 --> 00:21:15,142
最后 我们在节目开头描述的那堵墙 
In the end, that wall we described at the top of the episode, 

328
00:21:15,142 --> 00:21:17,142
也就是把开发和运维划分开来的那堵墙
the one dividing dev from ops

329
00:21:17,480 --> 00:21:21,488
我甚至不知道“把你的代码扔过墙”的比喻
I don't even know if the whole throw - your - code - over - the - wall analogy 

330
00:21:21,488 --> 00:21:23,808
在五年后对一个开发者来说是否有意义
is going to make sense to a developer in five years

331
00:21:24,000 --> 00:21:26,080
如果五年后大家都听不懂这个比喻 那真是一件大好事
and that's sort of a great thing

332
00:21:26,475 --> 00:21:29,880
不过目前为止的访谈很有价值 我听到了很多新的故事
Already, when I talk to folks today, I'm hearing a new story

333
00:21:29,880 --> 00:21:32,640
现在说话的是云架构师 Richard Henshall
Cloud architect Richard Henshall

334
00:21:32,640 --> 00:21:38,860
我觉得 DevOps 开始让人们意识到对方关心的是什么
I think it is starting to make people realize what the other side of the equation was concerned about more

335
00:21:38,860 --> 00:21:41,960
我看到了更多对彼此的理解
I've seen a lot more understanding.

336
00:21:41,960 --> 00:21:44,120
现在是系统管理员 Jonah Horowitz
Sysadmin Jonah Horowitz

337
00:21:44,120 --> 00:21:47,780
我认为你需要很棒的技巧来写出真正好的软件
I think there's a craft to writing really good software

338
00:21:48,225 --> 00:21:53,620
我在与我合作过最棒的开发者身上看到了一件事
and one thing that I see in the best developers that I work with

339
00:21:53,620 --> 00:21:57,680
那就是他们真的 他们贡献了软件工程的新技巧
is that they really, they push the craft of software engineering

340
00:21:57,680 --> 00:22:00,020
或者说他们推动了软件开发这个行业的发展
or software development, forward.

341
00:22:00,020 --> 00:22:02,340
最后一个是系统管理员 Sandra Henry-Stocker
Sysadmin, Sandra Henry-Stocker

342
00:22:02,340 --> 00:22:09,240
我认为 开发者会变得更加精明、更加谨慎
I think that developers are becoming much more astute and much more careful

343
00:22:09,240 --> 00:22:13,440
他们始终要提升自己的技能
They're consistently having to up their skills

344
00:22:13,440 --> 00:22:16,480
我知道这需要很多辛苦的学习
and I know that takes a lot of work

345
00:22:19,480 --> 00:22:21,060
DevOps 是个爱的结晶
It's a love-in

346
00:22:21,060 --> 00:22:24,180
原来 在那堵墙的另一边还有一些朋友
Turns out, there were some friends on the other side of that wall

347
00:22:24,180 --> 00:22:25,560
很高兴认识你们
Nice to meet you

348
00:22:27,440 --> 00:22:32,240
所以 坦白一下 我以前总觉得 DevOps 很无聊
So, a confession, I always used to think DevOps was boring

349
00:22:32,240 --> 00:22:35,900
就是一堆硬核的自动化脚本和扩展问题
just a bunch of hardcore automation scripts and scaling issues

350
00:22:35,900 --> 00:22:38,220
我的抵触情绪有一部分是出于它的实践难度
My resistance was partly just practical

351
00:22:38,220 --> 00:22:42,980
作为开发者 我每周都要面对一些新出来的工具 一些新的框架
As developers, every week there's some new tool coming out, some new framework

352
00:22:42,980 --> 00:22:46,380
DevOps 一直是那些可怕的、快速变化的一部分
DevOps has been part of those scary, fast changes

353
00:22:46,975 --> 00:22:50,280
但现在 尤其是听了这些故事之后 我明白了
But now, especially after hearing these stories, I get it

354
00:22:50,280 --> 00:22:52,460
DevOps 不仅仅是其工具
DevOps is more than its tools

355
00:22:52,460 --> 00:22:55,960
它是教导我们如何合作 更快地构建更好的产品的方法
It's how we can work together to build better products faster

356
00:22:55,960 --> 00:23:00,740
好消息是 随着为你我这样的开发者准备的新平台出现
Here's the good news, as we develop new platforms for developers like you and me

357
00:23:00,740 --> 00:23:05,640
我们的工作变得更好、更快、更能适应不同的环境
my work is becoming better, faster, and more adaptive to different environments

358
00:23:05,640 --> 00:23:08,800
我的业务圈也可以不断扩大
The circle of interest can keep expanding too

359
00:23:08,800 --> 00:23:11,425
你会看到人们将 DevOps 扩大到安全领域 
You see people widening DevOps to include security, 

360
00:23:11,425 --> 00:23:13,140
所以我们能得到 Sec DevOps
so we get Sec DevOps

361
00:23:13,140 --> 00:23:16,380
或者他们开始包含商务 那我们就得到了 Biz DevOps
or they include business, so we get Biz DevOps

362
00:23:16,650 --> 00:23:18,580
我们现在要辩论的话题是：
The debate we're going to have now is

363
00:23:18,580 --> 00:23:23,040
对于一个开发者来说 不仅要了解如何使用这些工具
how important is it for a developer to understand not just how to use these tools

364
00:23:23,040 --> 00:23:25,580
还有了解所有 DevOps 的东西是如何工作的必要吗？
but how all that DevOps stuff even works

365
00:23:25,580 --> 00:23:30,380
以及我们需要所有开发者都去了解这个新世界吗？
and how realistic is it to expect developers to understand that new world?

366
00:23:30,380 --> 00:23:36,680
这场辩论的结果将决定未来一期《代码英雄》的内容
The way we settle that debate is going to define the work of tomorrow's Command Line Heroes.

367
00:23:41,300 --> 00:23:44,600
你可能已经注意到 在所有关于工具和自动化的谈话中 
You might have noticed that in all that talk about tools and automation 

368
00:23:44,600 --> 00:23:46,025
我漏掉了一些工具
I left out some big ones

369
00:23:46,525 --> 00:23:48,740
好吧 我把这些留到下一期
Well, I'm saving those for next time

370
00:23:48,740 --> 00:23:54,240
当所有这些 DevOps 自动化达到光速时 我们将追踪容器的崛起
when all this DevOps automation hits lightspeed and we track the rise of containers

371
00:23:54,240 --> 00:23:56,380
是的 这些都会留到第五期
It's all in episode 5

372
00:23:57,120 --> 00:24:00,720
《代码英雄》是红帽公司推出的原创播客栏目
Command Line Heroes is an original podcast from Red Hat

373
00:24:00,720 --> 00:24:03,323
想要了解更多关于本期节目和以往节目的信息 
For more information about this and past episodes,

374
00:24:03,643 --> 00:24:06,469
请访问 redhat.com/commandlineheroes
 go to redhat.com/commandlineheroes

375
00:24:06,620 --> 00:24:09,660
在那里 你还可以注册我们的新闻资讯
Once you're there, you can also sign up for our newsletter

376
00:24:09,660 --> 00:24:15,240
想免费获得新剧集的自动推送 请务必订阅该节目
and to get new episodes delivered automatically for free, make sure to subscribe to the show

377
00:24:15,500 --> 00:24:19,974
只要在苹果播客、Spotify、
Just search for Command Line Heroes in Apple Podcasts, Spotify, 

378
00:24:19,974 --> 00:24:21,561
Google Play、CastBox 等平台中搜索《代码英雄》 
Google Play, CastBox, 

379
00:24:21,561 --> 00:24:23,050
或者通过其他方式收听
or however you get your podcasts.

380
00:24:23,420 --> 00:24:28,320
并点击订阅 这样你就能在第一时间知道最新剧集
hen hit subscribe, so you'll be the first to know when new episodes are available

381
00:24:29,050 --> 00:24:32,244
我是 Saron Yitbarek 感谢您的收听 编程不止
I'm Saron Yitbarek. Thanks for listening, and keep on coding

