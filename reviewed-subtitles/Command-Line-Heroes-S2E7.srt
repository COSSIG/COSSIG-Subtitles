1
00:00:03,475 --> 00:00:06,900
现如今 当然了 在全美
But now, of course, all over the United States of America

2
00:00:06,900 --> 00:00:12,050
乃至全世界 互联网正在彻头彻尾地改变着我们的生活
and all over the world the internet is revolutionizing our lives.

3
00:00:13,394 --> 00:00:15,050
那是 1998 年
It's 1998.

4
00:00:15,370 --> 00:00:18,152
Google 刚刚雇佣了它的第一名员工
Google just hired its first employee,

5
00:00:18,408 --> 00:00:21,500
副总统 Al Gore 在接受媒体采访
and Vice President Al Gore is talking to the press.

6
00:00:22,025 --> 00:00:25,689
这项技术还处于起步阶段
This technology is still in its infancy.

7
00:00:25,945 --> 00:00:30,850
当我和比尔·克林顿总统入主白宫时 只有 50 个网站
When president Bill Clinton and I came into the White House there were only 50 sites.

8
00:00:30,850 --> 00:00:32,710
现在看看
And look at it now.

9
00:00:32,710 --> 00:00:35,532
我在生日那天收到了一束虚拟鲜花
I got a bouquet of virtual flowers on my birthday.

10
00:00:37,132 --> 00:00:40,637
好的 我已经感觉到你的眉毛抬起了
Okay. I can sense your eyebrow arching already.

11
00:00:41,036 --> 00:00:45,174
为什么我要向你展现 20 年前的互联网史？
Why am I playing you some bit of 20-year-old Internet history?

12
00:00:45,644 --> 00:00:51,043
这是因为 我想提醒你 互联网的基础从未改变
It's because I want to remind you that the basics of the Internet are still the same.

13
00:00:51,619 --> 00:00:54,855
当然 现在有不止 50 个站点了 我知道
Sure, there are more than 50 sites now. I get it.

14
00:00:55,111 --> 00:00:58,400
但是 我们仍然在互送虚拟鲜花
But, we're still sending virtual flowers.

15
00:00:58,912 --> 00:01:01,093
从开发人员的角度来看
And from a developer's perspective,

16
00:01:01,093 --> 00:01:04,442
即便互联网已经发生了翻天覆地的变化
if you strip away all our incredible advances,

17
00:01:04,800 --> 00:01:09,236
你仍能看到一切伊始时的客户端 - 服务器模型
you've still got that same client-server model that started it all.

18
00:01:09,556 --> 00:01:13,800
这一模型使分布式网络成为可能
A client-server model that allows for a distributed network.

19
00:01:16,360 --> 00:01:20,377
如今 “无服务器”是开发者口中的一大热门话题
Today, developers talk a lot about going serverless,

20
00:01:20,761 --> 00:01:25,339
听起来就像 Al Gore  提到的客户端 - 服务器模型被废弃了
which sounds like Al Gore's client-server internet just got trashed.

21
00:01:25,800 --> 00:01:27,400
而且 如果我们不小心
And if we're not careful,

22
00:01:27,400 --> 00:01:30,744
基础设施就会被过分地抽象化
we can abstract away so much infrastructure

23
00:01:30,744 --> 00:01:35,564
我们就会忘记 服务器仍然存在 仍然一如既往地运作
that we forget there are still servers out there doing their server thing.

24
00:01:36,908 --> 00:01:41,492
“无服务器”真的意味着“没有服务器”吗？真的吗？
But does serverless literally mean no servers? Really?

25
00:01:41,940 --> 00:01:46,608
或者 只是开发者和服务器之间的关系发生了变化？
Or is the developer's relationship with servers just evolving?

26
00:01:46,992 --> 00:01:50,961
在这一集中 我们将与来自世界各地的人们交谈
In this episode, we are talking with people from around the world

27
00:01:50,961 --> 00:01:53,630
以探索所谓“无服务器”的概念
to explore this thing called serverless.

28
00:01:54,745 --> 00:01:56,269
我是 Saron Yitbarek
I'm Saron Yitbarek,

29
00:01:56,269 --> 00:02:00,671
这里是《代码英雄》 一档来自红帽的原创播客节目
and this is Command Line Heroes. An original podcast from Red Hat.

30
00:02:02,975 --> 00:02:05,651
你知道无线网络在某些地方还有线缆吗？
Did you know wireless internet has wires somewhere?

31
00:02:06,295 --> 00:02:10,087
这是 Andrea Passwater 她就职的公司名叫…
Andrea Passwater works for a company called ...

32
00:02:10,087 --> 00:02:11,211
…“无服务器”
Serverless.

33
00:02:11,851 --> 00:02:17,307
他们创建了一款流行的开源框架 用来开发无服务器应用程序
They created a popular, open source framework for developing serverless applications.

34
00:02:17,972 --> 00:02:24,417
Andrea 注意到 各个组织都渴求着基础设施的进一步抽象化
Andrea is noticing how organizations are hungry for ways to abstract away infrastructure,

35
00:02:24,801 --> 00:02:28,554
而这正是“无服务器”一词总显得前景无限 令人入迷的原因
which is what that magical word serverless is always promising.

36
00:02:28,554 --> 00:02:33,188
我认为这一术语主要是为了传达这样一个事实
I think the term is mostly just supposed to convey the fact that

37
00:02:33,188 --> 00:02:36,596
即如果你是开发者 你开发无服务器应用
as a developer who works in serverless applications

38
00:02:36,596 --> 00:02:38,250
你就不必考虑那些服务器 因为它们都被抽象掉了
that's abstracted for you.

39
00:02:38,250 --> 00:02:40,518
你就不必考虑那些服务器 因为它们都被抽象掉了
You don't have to worry about those servers.

40
00:02:40,710 --> 00:02:45,015
你只需要写代码并将代码部署到云提供商即可
You just get to code and deploy that code up to a cloud provider

41
00:02:45,015 --> 00:02:47,201
不必担心管理
and not have to worry about the administration.

42
00:02:47,201 --> 00:02:48,686
这就是无服务器的真正含义
That's really what serverless means.

43
00:02:49,175 --> 00:02:53,373
对于 Andrea 来说 无服务器的优势很明显
For Andrea, the attractions of serverless are pretty obvious.

44
00:02:53,501 --> 00:02:56,950
倘若你以无服务器的方式开发应用程序
If you develop applications in a serverless way,

45
00:02:56,950 --> 00:02:58,521
你就可以不必考虑部署和维护的日常工作
it gives you the ability to

46
00:02:58,521 --> 00:03:01,882
你就可以不必考虑部署和维护的日常工作
not have to think about the mundane parts

47
00:03:01,882 --> 00:03:07,279
你就可以不必考虑部署和维护的日常工作
of deploying that application and maintaining that application.

48
00:03:07,642 --> 00:03:10,320
这意味着 你可以专注于它的商业价值
It just means that you can focus on business value.

49
00:03:10,320 --> 00:03:12,320
你可以专心发挥创造力
You can focus on being creative.

50
00:03:12,725 --> 00:03:18,413
而无服务器的另一大好处是 不太容易重复造轮子
And another big serverless bonus is you're less likely to find yourself reinventing the wheel.

51
00:03:18,750 --> 00:03:22,809
当有像 Auth0 这样可以直接使用的服务存在时
Why would you create your own way to handle authentication

52
00:03:22,809 --> 00:03:26,921
为什么要自己实现一套身份验证方法呢？
when services like Auth0 exist that you can just use and tap into

53
00:03:27,175 --> 00:03:28,925
归根结底
At the end of the day,

54
00:03:28,925 --> 00:03:34,000
无服务器就是为开发人员提供机会
serverless is about giving developers the opportunity to be able to

55
00:03:34,000 --> 00:03:38,025
让他们能更快地按照想法编写程序
more easily and more rapidly build all of these ideas in their heads

56
00:03:38,025 --> 00:03:39,600
实现想要的效果
that they want to get out into the world.

57
00:03:40,900 --> 00:03:43,860
想象一下 你拿了满手的东西
Imagine you've got your arms full of groceries,

58
00:03:44,025 --> 00:03:46,025
正跌跌撞撞地走向一扇门
and you're stumbling toward a door.

59
00:03:46,025 --> 00:03:49,650
这扇门滑开了 以简单、友好…
The door slides open in a simple, friendly-

60
00:03:50,025 --> 00:03:50,825
（“麻烦开一下”）
Allow me.

61
00:03:51,209 --> 00:03:53,934
…的方式 这就是无服务器
... kind of way. That's serverless.

62
00:03:54,190 --> 00:03:58,819
它为你打开了大门 使得开发工作不再那么繁琐
It's opening the door for you, making development a lot less cumbersome.

63
00:03:59,375 --> 00:04:03,723
随着各个组织对混合云环境的逐渐青睐
In fact, as organizations flock toward hybrid cloud setups

64
00:04:03,723 --> 00:04:06,047
以及无服务器运动的发展
and the serverless movement gets underway,

65
00:04:06,047 --> 00:04:09,071
开发的障碍正在消失
the barriers toward development are vanishing.

66
00:04:09,519 --> 00:04:13,850
Andrea 听说过很多“非开发人员参与开发”的故事
Andrea has been hearing a lot of talk about non-developer development.

67
00:04:13,850 --> 00:04:18,650
也就是 一般来说认为自己写不了代码
Sort of stories from people who traditionally thought they couldn't code,

68
00:04:18,650 --> 00:04:24,237
现在却由于无服务器 得以投身软件工程的人的故事
and who are now actually able to get into the software engineering game because of serverless.

69
00:04:24,237 --> 00:04:29,100
他们还能编写工具 自动化自己的工作流程
And able to make these tools that automate their own workflows and stuff like that.

70
00:04:29,100 --> 00:04:31,100
这跟你从事的是什么职业无关
It doesn't matter what job you do.

71
00:04:31,396 --> 00:04:34,625
工作中总会有些事繁琐又枯燥
There's something you do on your job that is so rote,

72
00:04:34,625 --> 00:04:38,097
每天都要做这样的事 你就会想
like you do it every single day and it's this thing that you're like,

73
00:04:38,097 --> 00:04:40,673
“这玩意儿难道不能让电脑替我来吗？”
"You know, couldn't a computer do this for me?"

74
00:04:40,900 --> 00:04:43,175
我开始有这种感觉的时候
I started to feel that way.

75
00:04:43,175 --> 00:04:46,095
我碰巧在一家名为“无服务器”的公司工作
I happened to work at this company called Serverless

76
00:04:46,095 --> 00:04:46,112
I happened to work at this company called Serverless

77
00:04:46,112 --> 00:04:49,760
他们这样说：“你知道我们的产品能帮到你吧？”
and they were like, "You realize that the product we make can help you with that. Right?"

78
00:04:50,144 --> 00:04:52,482
Andrea 认为 不久之后
Andrea figures that pretty soon

79
00:04:52,674 --> 00:04:57,508
许多从未将自己视为开发人员的人将意识到
a lot of people who never considered themselves developers are going to realize

80
00:04:57,508 --> 00:05:01,940
他们能自己制作简单的应用程序 费用几乎可以忽略不计
they can build simple apps themselves. At essentially no cost.

81
00:05:02,260 --> 00:05:06,052
使用 Lambda 时 我从来不需要为自己制作的任何小型应用付费
With Lambda, I've never had to pay for any of these small applications that I've made.

82
00:05:06,436 --> 00:05:09,406
我可以让机器人为我做一部分工作
I can make these bots that do part of my job for me,

83
00:05:09,406 --> 00:05:11,700
提高工作效率
and I can become more efficient at my job, yes.

84
00:05:11,700 --> 00:05:14,660
我也不必再亲手操办无聊的部分了
But, I also don't have to do that boring stuff anymore.

85
00:05:14,660 --> 00:05:16,376
我可以做些更有趣的事情
I can do something that's more fun.

86
00:05:17,075 --> 00:05:18,700
即使是对于专业开发人员来说
Even for pro developers,

87
00:05:18,956 --> 00:05:24,476
这种“自动门”效果在满手杂物的世界里也是很诱人的
that automatic door effect is pretty tempting in an arms-full-of-groceries kind of world.

88
00:05:25,372 --> 00:05:29,164
我认为 大家都很想要这种效果
I think people are very attracted to the idea that

89
00:05:29,350 --> 00:05:33,925
一两个人的团队 在很短的时间内就完成产品原型
they can get prototypes working with a one- or two-person team

90
00:05:33,925 --> 00:05:35,450
一两个人的团队 在很短的时间内就完成产品原型
in a very short amount of time.

91
00:05:35,450 --> 00:05:36,668
像是 在几天时间内搞定
Like, a handful of days.

92
00:05:36,668 --> 00:05:38,393
在几天时间内 他们就可以启动原型
They can get a prototype up and running.

93
00:05:38,650 --> 00:05:42,950
这实在是幸事一件 人们渐渐发现
I think it makes it very exciting for people to start realizing

94
00:05:42,950 --> 00:05:48,470
如此这般 他们就能专注于应用功能 使其创造更多价值
that they get to just focus on what drives business value in their application,

95
00:05:48,470 --> 00:05:50,586
就能多考虑他们的产品 多考虑他们的公司
or for their product, for their company.

96
00:05:50,675 --> 00:05:52,799
他们可以专注于商业价值
They get to focus on that business value.

97
00:05:54,079 --> 00:05:56,911
我要再抛出一个术语给你 准备好了吗？
I'm going to throw another term at you. Ready?

98
00:05:57,400 --> 00:05:59,324
“函数即服务”（FaaS）
Functions-as-a-service.

99
00:05:59,708 --> 00:06:02,268
无服务器平台提供的就是这项业务
That's the offering at serverless places

100
00:06:02,268 --> 00:06:05,575
这些平台包括 AWS Lambda 和 Apache OpenWhisk
like AWS Lambda, or Apache OpenWhisk.

101
00:06:05,975 --> 00:06:07,951
“函数即服务”意味着
Functions-as-a-service means

102
00:06:07,951 --> 00:06:11,440
能在有必要时 专门执行单独的函数
a single function can be executed on demand,

103
00:06:11,632 --> 00:06:13,038
只在触发时执行
only when triggered.

104
00:06:13,275 --> 00:06:14,833
这样效率更高
And that's a lot more efficient.

105
00:06:15,345 --> 00:06:19,457
与此同时 对计算能力和运行时间的忧虑也会大大减少
Plus, I'm way less worried about compute capacity and run time.

106
00:06:19,777 --> 00:06:24,529
说到底 无服务器的这一套配置可以相当诱人
End of the day, that serverless deal can be a pretty sweet setup.

107
00:06:24,657 --> 00:06:27,937
有些人甚至开始考虑
In fact, some folks have even started wondering,

108
00:06:28,200 --> 00:06:33,656
我们要把所有业务都迁移到无服务器平台吗？它可以替代容器吗？
are we going all in on serverless? Does it maybe replace containers?

109
00:06:33,975 --> 00:06:35,198
我理解这这种想法
I see the point.

110
00:06:35,582 --> 00:06:40,974
Michael Hausenblas 是 Red Hat OpenShift 团队的开发倡导者
Michael Hausenblas is the developer advocate for the OpenShift® team over at Red Hat.

111
00:06:41,100 --> 00:06:43,660
如果你看一下现在的这些云计算平台
If you look at all of these things we have here,

112
00:06:43,660 --> 00:06:47,324
包括 OpenShift 和 Cloud Foundry 之类
OpenShift and Cloud Foundry and what not,

113
00:06:47,625 --> 00:06:50,000
它们做的很多事 实质上都是抽象化
you have essentially these abstractions.

114
00:06:50,000 --> 00:06:55,285
这样的指导思想从 Heroku 就开始了
This idea that the Heroku, essentially, bent it more or less.
Heroku 是最早的云计算平台之一

115
00:06:55,285 --> 00:06:59,349
对吧？这样能为开发者带来极大方便 无需担心程序会如何运行
Right? This very simple way of, don't worry about how the execution will run,

116
00:06:59,349 --> 00:07:00,716
无需担心整体的图景
don't worry about what it looks like.

117
00:07:00,716 --> 00:07:02,868
只需要给我们代码 我们来处理剩下的工作
Just give us the code and we take care of the rest.

118
00:07:03,700 --> 00:07:05,567
是的 听起来相当不错
Yeah. That sounds pretty good.

119
00:07:05,951 --> 00:07:09,743
这听起来有点儿像是梦想中的“无运维”环境
It kind of sounds like that dream of a “no-ops”environment.

120
00:07:10,063 --> 00:07:12,977
一切都自动化并且抽象化了
Where everything is automated and abstracted away.

121
00:07:13,553 --> 00:07:17,665
就像是开发者版本的极简主义室内设计
It's like the developer's version of minimalist interior design.

122
00:07:17,857 --> 00:07:20,604
在表面上 一切都干净又友好
Nice, clean surfaces.

123
00:07:20,988 --> 00:07:24,862
但是 Michael 想要让你了解你一些现实情况
But, Michael wants to give you a little reality check.

124
00:07:24,990 --> 00:07:31,150
没有运维！对吧？！你懂的 运维会跟变魔术一样消失掉
No ops! Right? You know, it magically just will somehow go away.

125
00:07:31,470 --> 00:07:35,182
HackerNews 和 Twitter 之类的地方到处都是无服务器笑话
You see these jokes on HackerNews and Twitter, and wherever.

126
00:07:35,182 --> 00:07:37,050
无服务器？当然有服务器！
Serverless, of course there are servers!

127
00:07:37,050 --> 00:07:39,150
我知道 当然有 而且也肯定有运维
I know, of course there are. There's operations.

128
00:07:39,726 --> 00:07:43,650
总得有人去做这些 总得有人去架设服务器
Someone has to do that, someone has to rack the servers.

129
00:07:43,650 --> 00:07:45,917
总得有人给操作系统打补丁
Someone has to patch the operating systems.

130
00:07:45,917 --> 00:07:47,897
去创建容器镜像
Someone has to create container images,

131
00:07:47,897 --> 00:07:50,286
因为 你猜猜这些函数会在哪里执行？
because guess where these functions are executing?

132
00:07:50,286 --> 00:07:52,024
当然是在某种计算机上
Of course, in some kind of computer.

133
00:07:52,920 --> 00:07:54,993
这不是零和博弈
It's not a zero-sum game.

134
00:07:55,441 --> 00:07:59,169
“函数即服务”无法直接取代容器
Functions-as-a-service don't outright replace containers.

135
00:07:59,350 --> 00:08:02,185
而只是在工具箱中增加了一个工具
Instead, they add a tool to the tool box.

136
00:08:02,569 --> 00:08:04,569
我还有别的要说
And I've got some more news for you.

137
00:08:05,008 --> 00:08:06,475
使用这种新工具
Using that new tool,

138
00:08:06,475 --> 00:08:10,784
使用无服务器不代表你就能把运维工作全部推给别人
going serverless doesn't just mean the ops is somebody else's problem.

139
00:08:10,903 --> 00:08:13,401
你仍然需要自己考虑自己的运维
You've still got ops of your own to think about.

140
00:08:13,657 --> 00:08:16,704
基础设施侧当然要为运维工作负责
You see there is operations bits on the infrastructure side.

141
00:08:16,704 --> 00:08:19,579
但开发者也并非全无这方面的责任
But, also with the developers.

142
00:08:19,579 --> 00:08:21,906
如果你处于极端情况之下
If you're in an extreme case,

143
00:08:21,906 --> 00:08:23,475
比如说使用 Lambda
using let's say Lambda,

144
00:08:23,795 --> 00:08:29,275
那你根本联系不了管理员 对吧？
then you have zero access to any kind of administrators. Right?

145
00:08:29,275 --> 00:08:33,707
你不能直接给基础设施管理员打电话 或者发短信
You cannot simply call or page an infrastructure administrator.

146
00:08:34,175 --> 00:08:37,903
显然 你的组织之中就得有人接手这部分运维
Obviously, someone in your organization has to do it.

147
00:08:38,351 --> 00:08:44,200
但是 我担心许多组织只看到了无服务器的便捷和便宜
But, I fear that many organizations only see it's so simple and cheap.

148
00:08:44,200 --> 00:08:45,688
这里也不用操心 那里也不用插手
We don't need to move this, and this, and this.

149
00:08:46,008 --> 00:08:50,675
然后忘记了谁需要待命 谁需要负责运维
Then forget about who is on call, and who really is on call?

150
00:08:50,675 --> 00:08:51,940
你对此有策略吗？
Do you have a strategy for that?

151
00:08:52,068 --> 00:08:58,292
如果没有的话 那你得在一头扎进去之前 先制定一个策略
If no, then you might want to come up with a strategy first before you go all in there.

152
00:08:59,825 --> 00:09:01,519
需要有人处于待命状态
Someone needs to be on call.

153
00:09:02,095 --> 00:09:04,863
即使选择了“无服务器”
Even if you do go "serverless,"

154
00:09:05,119 --> 00:09:08,847
你脑子里还是得装着业务的全貌
you still need to have your head wrapped around that bigger picture.

155
00:09:09,359 --> 00:09:12,383
你仍然需要让运维有序进行
You still need to get your operations in order.

156
00:09:24,650 --> 00:09:28,058
我之前抛出那个“函数即服务”术语时
When I threw out that term earlier, functions-as-a-service,

157
00:09:28,058 --> 00:09:29,605
你是不是有过些许畏缩？
did you cringe a little?

158
00:09:30,175 --> 00:09:36,783
过去 基于云的开发为我们带来了大量的 “xx 即服务”的术语
Over the last while cloud-based development has brought us an army of “as-a-service”terms.

159
00:09:37,103 --> 00:09:38,918
我们有基础架构即服务（IaaS）
We've got infrastructure-as-a-service,

160
00:09:38,918 --> 00:09:40,672
平台即服务（PaaS）
we've got platform-as-a-service,

161
00:09:40,672 --> 00:09:43,888
软件即服务（SaaS）、数据即服务（DaaS）
we've got software-as-a-service, data-as-a-service.

162
00:09:43,888 --> 00:09:45,513
数据库即服务（DBaaS）
Database-as-a-service.

163
00:09:46,025 --> 00:09:46,946
你懂我的意思
You get the idea.

164
00:09:47,500 --> 00:09:50,350
如果你难以理解它们的不同 那你并不孤单
If you're having trouble keeping the differences straight,

165
00:09:50,350 --> 00:09:51,526
如果你难以理解它们的不同 那你并不孤单
you're not alone.

166
00:09:52,102 --> 00:09:54,934
这就是我们找来了 Himanshu Pant 的原因
That's why we tracked down Himanshu Pant.

167
00:09:55,254 --> 00:09:59,625
他是位于印度德里的苏格兰皇家银行的技术主管
He's a tech lead at the Royal Bank of Scotland, over in Delhi, India.

168
00:09:59,945 --> 00:10:03,353
他花了多年时间来分析其中的差异
He spent years parsing out the differences here.

169
00:10:04,375 --> 00:10:06,675
这些其他的计算范型
These other computing paradigms

170
00:10:06,675 --> 00:10:09,850
在名称上和无服务器听起来是如此的相似
are so similar sounding in name to serverless
注：本篇中“无服务器”和“函数即服务”两个词等价，且会被互换着使用

171
00:10:09,850 --> 00:10:11,600
以至于 一个人要么容易忘了为什么这些不叫“无服务器”
that one tends to forget,

172
00:10:11,600 --> 00:10:14,725
要么从来没搞懂过这些词跟“无服务器”的区别
or tends to get confused as to why,

173
00:10:14,725 --> 00:10:16,550
要么从来没搞懂过这些词跟“无服务器”的区别
this is not being called serverless.

174
00:10:16,550 --> 00:10:18,557
要么干脆不知道为什么无服务器叫做“无服务器”
Or why this is being called a serverless.

175
00:10:20,029 --> 00:10:23,565
无服务器与容器不同
So, serverless is not the same as containers.

176
00:10:24,017 --> 00:10:26,859
无服务器也不是平台即服务
Serverless is not platform-as-a-service.

177
00:10:27,179 --> 00:10:29,883
Himanshu  想将它们之间的界限划清
But Himanshu wanted to nail it down.

178
00:10:30,203 --> 00:10:34,763
“函数即服务”能提供什么 又不能提供什么？
What can functions-as-a-service provide, exactly? And what can't it?

179
00:10:35,275 --> 00:10:37,266
他与我们分享了两则轶事
He shared two anecdotes with us,

180
00:10:37,266 --> 00:10:42,210
一次 他决定使用无服务器 另一次他决定放弃
two times when he figured out when to go with serverless and when to forgo.

181
00:10:42,850 --> 00:10:46,642
第一则轶事来自一次 24 小时黑客马拉松
The first moment came during a 24-hour hackathon.

182
00:10:47,000 --> 00:10:49,448
Himanshu 当时正试图开发一个聊天机器人
Himanshu was trying to make a chat bot.

183
00:10:49,675 --> 00:10:53,025
有各种各样的指标会决定它成功与否
There were various vectors on which this was going to be a sales.

184
00:10:53,025 --> 00:10:56,350
例如逻辑覆盖率
For example, that coverage of logic,

185
00:10:56,350 --> 00:11:00,270
可能的成本 以及可伸缩性
the cost which would be incurred and the scalability.

186
00:11:01,321 --> 00:11:03,777
而我选择在无服务器环境下完成这项工作
I sat down to do this work in serverless.

187
00:11:03,905 --> 00:11:07,425
我开发它的时候 我意识到成本这个要素
As I did, I realized that cost aspect was one aspect,

188
00:11:07,425 --> 00:11:10,512
而成本控制这方面是我的长项
which kind of really tippedthe skill in my favor.

189
00:11:10,775 --> 00:11:12,552
因此 即使其他所有的参与者
So even though all the other participants,

190
00:11:12,552 --> 00:11:14,500
都有更好的…覆盖率
they had a much better ... I would say coverage,

191
00:11:14,500 --> 00:11:15,700
或者说是逻辑覆盖率
or maybe coverage of logic,

192
00:11:15,700 --> 00:11:18,852
或者说在自然语言处理（NLP）方面做得更好
or the NLP situations or their scenarios.

193
00:11:18,852 --> 00:11:22,004
但是 就成本和可伸缩性而言
But, as far as cost is concerned, and scalability,

194
00:11:22,132 --> 00:11:24,505
我是手操胜券的
I was going hands down to win over there

195
00:11:24,505 --> 00:11:26,875
因为有了无服务器 成本就完全取决于
because with serverless it all depended on

196
00:11:26,875 --> 00:11:30,217
人们在该聊天机器人上所进行调用的次数
how many invocations people are doing on that chat bot.

197
00:11:30,217 --> 00:11:32,275
只有调用之后 函数才会执行
Accordingly, the functions will be triggered.

198
00:11:33,107 --> 00:11:36,175
这是一个我十分乐意采用无服务器的用例
This was one use case when I was very much happy to do serverless,

199
00:11:36,175 --> 00:11:38,925
因为成本 - 没有成本
because of the cost - there was no cost.

200
00:11:39,175 --> 00:11:41,823
以及更快的开发时间
Faster development time, and to be honest,

201
00:11:41,823 --> 00:11:45,200
而且老实说 当时还并不完全是生产规模级别的工作负载
it was not exactly a production-scale workload at that moment.

202
00:11:45,200 --> 00:11:50,656
我可以使用平台上的某些新兴工具
I could make do with the somewhat infant tooling of the platform.

203
00:11:50,656 --> 00:11:52,194
这对我而言是一次胜利
It was a win for me.

204
00:11:52,725 --> 00:11:57,045
真不错 那时候使用无服务器是合理的
Nice. That was a time when serverless made sense.

205
00:11:57,493 --> 00:12:00,773
但是 在 Himanshu 目前供职的银行里
But at the bank Himanshu is working in right now,

206
00:12:01,157 --> 00:12:04,309
人们正在将他们的系统从旧版迁移到云端
they're migrating their systems from legacy to cloud.

207
00:12:04,629 --> 00:12:07,205
而这提出了不同的目标
And that's bringing up different kinds of goals.

208
00:12:07,650 --> 00:12:10,600
我们在试着找出适合每一项业务的计算范型
We are trying to see which workload can go on to which paradigm.

209
00:12:11,176 --> 00:12:14,968
比如 IaaS、BaaS、FaaS
I should just go into IS, BAS, FAS,
分别意为：“基础设施即服务”，“银行即服务”，和“函数即服务”。

210
00:12:15,352 --> 00:12:17,275
这显然是属于企业领域的
obviously the ones who come down to enterprise space.

211
00:12:17,275 --> 00:12:21,725
有几个原因让我们放弃使用无服务器 其一是供应商依赖
You need to see that there are no aspects, like number one, let’s say vendor lock-in.

212
00:12:22,045 --> 00:12:24,957
以及第二 这项技术尚未得到广泛的验证
And number two, that technology should be proven, extensively.

213
00:12:24,957 --> 00:12:29,069
对于像银行业这样规避风险的行业而言 这点尤为重要
More so for a risk-averse industry like, you know, the banking sector.
Risk-averse: 通常译为“风险厌恶”
即：在相同的期望回报率下，偏好风险更小的方案

214
00:12:29,575 --> 00:12:31,818
这时我们决定采用平台即服务（PaaS）
This is where a platform-as-a-service,

215
00:12:31,818 --> 00:12:34,073
因为它经过更多验证
but still has a better proving,

216
00:12:34,073 --> 00:12:35,140
整体性能更好
and a better capability,

217
00:12:35,140 --> 00:12:37,596
可用的工具也更多
and a better tooling kind of takes the upper hand.

218
00:12:39,650 --> 00:12:43,791
Himanshu 正在研究自己的需求以及他自己的舒适区
Himanshu is looking at his own needs, and his own comfort levels,

219
00:12:44,050 --> 00:12:49,058
并研究哪些云计算范型应用在哪些业务上是合理的
and curating which workloads make sense in which cloud computing paradigm.

220
00:12:49,525 --> 00:12:52,537
假设 某位听众在一家贸易商店工作
Let's say a listener is working on a trading shop,

221
00:12:52,537 --> 00:12:54,747
他想构建某种东西 入门级别的
and he wants to build something, just an entry one.

222
00:12:54,975 --> 00:12:58,734
对于他或者她来说 无服务器可能并不是真正合适的选择
For him or her, serverless may not really be apt

223
00:12:58,734 --> 00:13:03,038
因为在那种在特定机器的应用程序中 延迟可能是不该出现的
because the latency may not really be desirable in that kind of a machine-particular application.

224
00:13:05,050 --> 00:13:07,463
归根结底 做决定之前得多考量
End of the day, it's a measured approach.

225
00:13:07,463 --> 00:13:09,847
而不是将所有东西都丢进一个桶里
Instead of throwing everything into one bucket.

226
00:13:11,875 --> 00:13:16,170
当你思考 哪一种基于云的架构适用于手头的任务时
When we're thinking about which cloud-based architecture is actually right

227
00:13:16,170 --> 00:13:17,587
当你思考 哪一种基于云的架构适用于手头的任务时
for the work we want to do,

228
00:13:17,950 --> 00:13:20,163
还有一件事需要考虑
there's one more thing to consider.

229
00:13:20,931 --> 00:13:25,235
所有的抽象化 所有解放你双手的东西
How all that abstracting, all that taking things off your hands,

230
00:13:25,575 --> 00:13:30,519
最终如何改变的不仅仅是我们的工作方式 还改变了产品本身
can end up changing not just our work lives, but the finished work itself.

231
00:13:31,225 --> 00:13:36,842
抽象掉一部分工作量 可供自定义的空间也会减少
Abstracting away part of our workload can mean less ability to customize.

232
00:13:37,075 --> 00:13:38,995
想象你买了一辆车
Think of a car you bought off the lot.

233
00:13:38,995 --> 00:13:41,095
它管用 它能开
It works. It drives.

234
00:13:41,095 --> 00:13:44,823
但是接着想象一下 你自己组装的车
But then, think of a car you built on your own.

235
00:13:45,207 --> 00:13:48,423
你想怎么开它 就能怎么开它
That one works the way you decided it would work.

236
00:13:48,615 --> 00:13:50,055
这是有代价的
It comes at a cost.

237
00:13:50,475 --> 00:13:55,650
Rania Khalaf 是 IBM 研究部门的 AI 工程总监
Rania Khalaf is the director of AI Engineering at IBM research.

238
00:13:56,226 --> 00:13:58,832
在使用无服务器应用程序时
In using these serverless applications,

239
00:13:58,832 --> 00:14:02,400
你可能无法完全控制程序运行的方式
you may not have full control of everything that's going on.

240
00:14:02,400 --> 00:14:05,744
你无法控制全盘计划 或是程序何时何地运行
You don't have control of scheduling, or when they'll run, or where.

241
00:14:06,350 --> 00:14:08,350
这是一种权衡 对吧？
There's a trade off taking place, right?

242
00:14:08,969 --> 00:14:12,697
使用无服务器 可能就代表无法进行精细控制
Fine-grain control may slip when you're using serverless.

243
00:14:12,889 --> 00:14:15,700
它对于终端用户而言 抽象化了如此之多的东西
It abstracts so much away from the end-user

244
00:14:15,700 --> 00:14:18,804
以至于 如果你想要更多控制权
that if you do want to have more control,

245
00:14:18,804 --> 00:14:20,335
想要不同的规划
different scheduling,

246
00:14:20,335 --> 00:14:21,902
更多制衡
more checks and balances,

247
00:14:22,175 --> 00:14:25,925
函数运行的不同时长
different values on how long a function can run for.

248
00:14:25,925 --> 00:14:27,068
等等等等
So on and so forth.

249
00:14:27,068 --> 00:14:30,625
你恐怕就得自己进入系统 动手修改
Then you really want to be able to get in there and tinker,

250
00:14:30,625 --> 00:14:32,336
魔改过后 或许还要自行部署
and maybe create your own deployments.

251
00:14:32,720 --> 00:14:34,925
这种需求会需要无服务器做出前所未有的改变
That would require something new, though.

252
00:14:35,075 --> 00:14:40,700
作为应答 开源社区为自身打造出了全新的无服务器平台
A new kind of serverless that open source communities are already building for themselves.

253
00:14:41,148 --> 00:14:44,300
Rania 和她的 IBM 团队参与了该运动
Rania and her team of IBMers are part of that movement.

254
00:14:44,600 --> 00:14:47,614
我们首先制作了一种编程语言…
We first worked on a language that was ...

255
00:14:47,614 --> 00:14:49,728
它基本上是 JavaScript 的扩展
It’s basically JavaScript extensions

256
00:14:49,728 --> 00:14:54,622
可以创建多线程交互服务的组合
to let you create these multi-threaded interactive service compositions

257
00:14:54,622 --> 00:14:57,450
为你提供一种更加轻量级服务的方式
as a starting point to give you a lighter-weight way.

258
00:14:58,218 --> 00:15:00,858
大约在同一时间
That was around the same time that

259
00:15:00,858 --> 00:15:05,875
云、微服务和平台即服务开始真正兴起
that cloud and microservices and platform-as-a-service were really picking up.

260
00:15:06,707 --> 00:15:10,654
将这两种趋势结合起来
Just combining these two trends and saying,

261
00:15:10,654 --> 00:15:15,325
就有了这种想法 - 将小的组件互相组合 以此来实现复杂的功能
there is this idea of being able to build higher order function from many small pieces

262
00:15:15,325 --> 00:15:17,325
这些组件可以是你自己写的 也可以来自其他人
that may or may not come from you.

263
00:15:18,221 --> 00:15:21,437
Rania 和她的团队负责构建 Apache OpenWhisk
Rania and her team were building Apache OpenWhisk.

264
00:15:21,437 --> 00:15:23,500
一款开源的函数平台
An open source functions platform.
*即“函数即服务”的平台

265
00:15:23,750 --> 00:15:26,550
我们从一开始就开源了 OpenWhisk
With OpenWhisk, from the beginning, we made it open source.

266
00:15:26,550 --> 00:15:32,774
一大原因是 让社区和我们一起参与进来
A big part of that was to really enable the community to participate with us.

267
00:15:32,774 --> 00:15:37,525
但是 同时也是为了揭掉外包装
But also to peel away the covers.

268
00:15:38,037 --> 00:15:41,100
将控制权交给
And give control to the people that

269
00:15:41,100 --> 00:15:45,733
想要运行自己的无服务器计算环境的人们
are wanting to operate their own serverless computing environments,

270
00:15:45,861 --> 00:15:48,214
以便他们能够根据自己的需求对其进行自定义
so that they can customize it to their needs.

271
00:15:48,214 --> 00:15:50,214
在有需要时 将它们置身于自己的控制之中
Maybe put in their own controls,

272
00:15:50,950 --> 00:15:53,725
看看它实际上是如何运行的 以对其进行更好的控制
see how it really works, and control it better.

273
00:15:54,045 --> 00:15:58,294
而且 我们还可以提供更加精细的控制
But, also provide the kind of finer-grain control

274
00:15:58,422 --> 00:16:02,022
如果它仅仅是一项服务 客户就不会有这种控制权
that people wouldn't have with it if it was only offered as a service.

275
00:16:02,982 --> 00:16:08,250
将控制权交还给想要运行自己的无服务器运行环境的人
Giving control back to anyone who wants to operate their own serverless environment.

276
00:16:08,570 --> 00:16:10,352
这是无服务器的下一步
It's next-stage serverless.

277
00:16:11,120 --> 00:16:14,676
OpenWhisk 推出后 其他无服务器平台也有样学样
Joining OpenWhisk, you've got other open source platforms

278
00:16:14,676 --> 00:16:16,450
比如 Fission 和 Gestalt
 like Fission and Gestalt.

279
00:16:16,834 --> 00:16:22,290
我们开始看到 无服务器的赛场上 平台们正在变得更具适应性
We start to see the serverless arena evolving into something more adaptable,

280
00:16:22,290 --> 00:16:24,300
而且功能更为强大
and more powerful than before.

281
00:16:31,228 --> 00:16:35,148
为了真正了解为什么开源版的无服务器很重要
To really get why an open source version of serverless matters,

282
00:16:35,468 --> 00:16:38,525
我与 OpenWhisk 的创始人之一进行了谈话
I got chatting with one of the founders of OpenWhisk.

283
00:16:38,909 --> 00:16:40,277
嗨 Rodric 最近好吗？
Hi, Rodric. How is it going?

284
00:16:40,597 --> 00:16:42,150
不错 你好吗？谢谢你邀请我参与节目
Good. How are you? Thanks for having me on.

285
00:16:44,454 --> 00:16:48,404
Rodric Rabbah 是构思并创立 OpenWhisk 的三位开发者之一
Rodric Rabbah was one of the three developers who conceived of,

286
00:16:48,404 --> 00:16:50,404
Rodric Rabbah 是构思并创立 OpenWhisk 的三位开发者之一
and founded, OpenWhisk.

287
00:16:50,914 --> 00:16:52,425
以下是我们的谈话
Here is our conversation.

288
00:16:52,900 --> 00:16:56,675
别人听了可能会很困惑 也可能会窃笑
It tends to be confusing for others or tends to get snickers,

289
00:16:56,675 --> 00:16:58,625
因为他们可能会想：
because people tend to think,

290
00:16:58,625 --> 00:17:00,425
“倘若没有服务器 你要怎么做计算呢？”
“How could you possibly compute without servers?”

291
00:17:00,425 --> 00:17:02,475
是的 服务器仍然存在
Right. Server is there somewhere,

292
00:17:02,475 --> 00:17:04,009
只是我不必去费心考虑它
it's just I don't have to worry about it.

293
00:17:04,009 --> 00:17:06,925
完全正确 这就是这个模式的美妙之处
Exactly. That's really the beauty of this model.

294
00:17:06,925 --> 00:17:09,925
只要你试过用无服务器的方式来开发软件
When you start developing in a serverless style,

295
00:17:10,300 --> 00:17:11,875
你就再也不想回到过去了
you never really want to go back.

296
00:17:11,875 --> 00:17:14,643
你知道 如今我已经置身其中 将近 4 年了
You know, I've been in it for close to four years now,

297
00:17:14,850 --> 00:17:17,938
也开发了一些达到生产质量的应用程序
and I've developed some production-quality applications.

298
00:17:18,258 --> 00:17:20,256
这是我如今惟一的开发方式
This is the only way I develop now.

299
00:17:20,256 --> 00:17:24,250
如果你叫我找一台服务器来 安装操作系统
If you tell me I have to provision a machine and install an OS,

300
00:17:24,250 --> 00:17:26,536
这对我而言 完全是陌生的
it's completely foreign to me.

301
00:17:26,536 --> 00:17:27,984
甚至 我还记不记得该怎么做 这都不好说
I'm not even sure I'd know how to do it anymore.

302
00:17:27,984 --> 00:17:32,450
嗯 你知道吗 你这样说的时候 无服务器听起来像是给开发者减负
Yeah. When you put it like that, it sounds like a huge load off,you know?

303
00:17:32,450 --> 00:17:34,175
当最初听说无服务器时
Because when you initially hear of serverless,

304
00:17:34,175 --> 00:17:35,067
至少我会想：
at least I think,

305
00:17:35,067 --> 00:17:37,120
“好家伙 我要学的东西又多了一样 ”
"Man, it's yet another thing I have to learn."

306
00:17:37,120 --> 00:17:40,525
但是 当你这样说的时候 听起来不错
But, when you put it that way it sounds nice.

307
00:17:40,525 --> 00:17:41,571
这确实听起来很棒
It does sound nice.

308
00:17:41,571 --> 00:17:45,575
然而 你也能意识到 我们不能把话说得太满
Then you have to realize that you have to take a little bit of air out of the bubble.

309
00:17:46,791 --> 00:17:48,136
它不是万能药
It's not a silver bullet.

310
00:17:48,712 --> 00:17:53,925
有哪些风险或问题
What are some of the surprising risks or issues

311
00:17:53,925 --> 00:17:57,176
是人们在起步时可能没有看到 或者没有察觉的呢？
that people may not see or be aware of when they get started?

312
00:17:57,176 --> 00:18:01,000
我认为缺乏透明度可能是最大的问题
I think the lack of transparency is possibly the biggest one.

313
00:18:01,000 --> 00:18:04,045
这有点儿让我想起了
It's sort of reminiscent to me of sort of

314
00:18:04,045 --> 00:18:06,750
那些提高了计算机抽象水平的技术
the technology that came about when new languages came about

315
00:18:06,750 --> 00:18:10,275
那些提高了计算机抽象水平的技术
and raised a level of abstraction relative to the computer.

316
00:18:10,275 --> 00:18:14,775
和它们一样 现在的无服务器技术使人吃惊
It's a similar kind of, sort of, startling effect in serverless today.

317
00:18:14,775 --> 00:18:18,819
也就是：“写一个函数 之后就能立马部署它”
In that you write, typically a function, then you just deploy that function.

318
00:18:18,819 --> 00:18:21,600
它可以立即运行
It's instantaneously available to run,

319
00:18:22,250 --> 00:18:24,300
比如在 web 上作为 APIN 点
say on the web as an APIN point.

320
00:18:24,600 --> 00:18:26,245
它可以大规模伸缩
It scales massively.

321
00:18:26,245 --> 00:18:30,375
我的意思是 你什么都不用做 也可以运行数千个实例
I mean, you can run thousands of instances without any work on your part.

322
00:18:30,759 --> 00:18:33,650
但要是哪里出了问题 那该如何调试呢？
But, if something goes wrong, it's like, how do I debug this?

323
00:18:33,775 --> 00:18:38,130
或者 如果我想检查函数失灵时的上下文环境 这又该怎么办呢？
Or I actually want to inspect the context within which my function failed.

324
00:18:38,450 --> 00:18:42,775
通常 这些功能在进程内运行 与你隔离 -
Typically, these functions run within processes, are isolated from you -

325
00:18:42,775 --> 00:18:46,725
你甚至不能登录计算机 查看你的代码在何处运行
you can't even log into the machine to see where your code is running.

326
00:18:46,725 --> 00:18:50,325
它们可能在封闭的容器环境之中运行
They might run in container environments that are closed off.

327
00:18:50,325 --> 00:18:51,908
你不知道里面有什么
You don't know what's in them.

328
00:18:52,036 --> 00:18:55,175
哪怕一点点透明度都很难获得
It becomes hard for you to get that little bit of transparency.

329
00:18:55,175 --> 00:18:57,559
这时候 工具就能派上用场了
This is where tools will eventually help.

330
00:18:57,687 --> 00:19:00,015
但是 目前工具的缺乏
But, the lack of tools sort of makes that

331
00:19:00,015 --> 00:19:03,143
让透明度的问题变成了一个大家都踩的坑
pretty significant pitfall for people to get their heads around.

332
00:19:03,550 --> 00:19:04,475
说得不错
That was really good.

333
00:19:04,475 --> 00:19:07,819
那么让我们回到 OpenWhisk
Okay. Let's go back to OpenWhisk, alright?

334
00:19:07,975 --> 00:19:09,077
请给我说说关于它的事情
Tell me about that.

335
00:19:09,397 --> 00:19:15,575
该项目在 Amazon Lambda 宣布推出产品的那一刻就开始了
The project started right around the time Amazon Lambda announced their offering,

336
00:19:15,575 --> 00:19:20,800
那正是无服务器真正成为术语
which was really where serverless started to get into the nomenclature

337
00:19:20,800 --> 00:19:24,016
并且开始在技术领域获得关注的时刻
and started to gain mindshare in the space.

338
00:19:24,464 --> 00:19:26,464
当我们看到 Lambda 时 我们开始思索：
When we saw Lambda, we started thinking,

339
00:19:26,812 --> 00:19:30,000
“这里有许多技术需要开发
“There is a lot of technology here that has to be developed.

340
00:19:30,000 --> 00:19:33,550
我们不仅需要为新的云计算方式进行开发
Not just at the base layer in terms of a new cloud computer,

341
00:19:33,800 --> 00:19:36,700
也要为其上的编程模型进行开发
but really in terms of your programming model that you put on top of it

342
00:19:37,075 --> 00:19:40,525
让开发者能更方便地使用无服务器
to make it more easily accessible to programmers.

343
00:19:41,000 --> 00:19:46,976
你知道 由于出自 IBM 研究所 我们拥有相当强大的技术
You know, coming out of IBM research, we had pretty strong ...

344
00:19:47,808 --> 00:19:50,862
比如编程语言设计方面的技术
set of skills around programming language design,

345
00:19:50,862 --> 00:19:53,089
以及关于编译器和运行时的专业技能
compiler expertise, and run time expertise.

346
00:19:53,425 --> 00:19:55,528
我们的团队很小 基本上只有三个人…
A small team of us, basically three people-

347
00:19:55,528 --> 00:19:55,978
哇
Wow.

348
00:19:56,349 --> 00:20:03,075
…聚集在一起 做了最初的开发和原型
... got together to essentially do the initial development and prototyped what became,

349
00:20:03,075 --> 00:20:06,483
最终成品就是 OpenWhisk  带有命令行工具
eventually, OpenWhisk, with respect to the command line tools,

350
00:20:06,483 --> 00:20:09,379
这些工具现在可以说得上是无服务器的编程接口
which is really the programming interface for serverless today.

351
00:20:09,700 --> 00:20:12,406
先提出它的编程模型
The programming model concepts,

352
00:20:12,406 --> 00:20:15,191
然后再决定它该支持怎么样的架构
and then the actual architecture that it has to support,

353
00:20:15,191 --> 00:20:17,690
也就是 “函数即服务”具体该怎么实现
essentially, this function of the service model

354
00:20:17,690 --> 00:20:20,448
才能让开发者获得无服务器的全部好处
and give you all the benefits that serverless espouses.

355
00:20:20,925 --> 00:20:24,475
请注意 真正的起源是 Amazon Lambda 的出现
The genesis was really Amazon Lambda coming on the scene and saying

356
00:20:24,475 --> 00:20:26,637
它面世时 这种新的计算模型也宣告面世
there's this new model of computing. Pay attention.

357
00:20:26,971 --> 00:20:29,225
那么 打造它花了多长时间？或者说 第一个版本什么时候出现的
How long did it take? Or the first version anyway.

358
00:20:29,225 --> 00:20:30,379
实际上很快
It happened quite fast.

359
00:20:30,379 --> 00:20:34,625
事实上 当 IBM 宣布 IBM OpenWhisk... 那时候它还叫这个
In fact, when IBM announced ... Well, it was at the time IBM OpenWhisk.

360
00:20:34,625 --> 00:20:37,393
从我们第一次提交 到那时候 才一年
It was one year to the date from our first commit.

361
00:20:37,393 --> 00:20:39,375
哇 我的天哪
Wow. Oh my goodness.

362
00:20:39,375 --> 00:20:39,725
其实挺厉害的
That was quite exciting.
哇 我的天哪
Wow. Oh my goodness.

363
00:20:39,725 --> 00:20:40,761
其实挺厉害的
That was quite exciting.

364
00:20:41,575 --> 00:20:42,471
这确实很令人印象深刻
That's really impressive.

365
00:20:42,471 --> 00:20:48,247
它其实最开始不叫 OpenWhisk 只有 Whisk 对吗？
Actually, when it first started, it wasn't OpenWhisk, it was just Whisk. Right?

366
00:20:48,247 --> 00:20:50,231
没错 Whisk 是内部名称
Whisk was the internal name, that's right.

367
00:20:50,231 --> 00:20:50,247
I'm responsible for the name.

368
00:20:50,247 --> 00:20:52,225
我取的这个名字
I'm responsible for the name.

369
00:20:52,225 --> 00:20:52,247
The idea behind the name was to move quickly and nimbly.

370
00:20:52,247 --> 00:20:56,081
这个名字隐含的意思是 迅速而又灵活地行动
The idea behind the name was to move quickly and nimbly.

371
00:20:57,250 --> 00:20:57,725
不错
Nice.

372
00:20:57,853 --> 00:21:00,101
你“搅拌”了一个函数 就可以了
You whip up a function and there it is.

373
00:21:00,101 --> 00:21:02,869
你可以将其放入烤箱中烘焙
You can put it in the oven and bake it.

374
00:21:03,125 --> 00:21:06,800
真是绝妙 我看到这个词 我肯定想的是鸡蛋
That's wonderful, because I was definitely thinking eggs when I saw that.

375
00:21:06,800 --> 00:21:09,100
我会想着 打蛋 “搅拌”鸡蛋
I was thinking, let's whisk some eggs.

376
00:21:09,484 --> 00:21:15,068
对 这个名字受到过一些好评 也有一些恶评
Right. We've done some positives and some negatives on the name.

377
00:21:15,400 --> 00:21:17,288
当我们开源一项技术
When we open source a technology,

378
00:21:17,288 --> 00:21:19,288
并将其放到 GitHub 上时
and sort of put it out on GitHub,

379
00:21:19,288 --> 00:21:25,975
我们会在加上 Open 前缀 以强调该技术开源开放
we put the open prefix on it to sort of emphasize that this is open as in open source

380
00:21:25,975 --> 00:21:28,623
可以自由使用、自由下载、自由贡献
and free to use, free to download, free to contribute to.

381
00:21:29,050 --> 00:21:33,354
我们将其开源是为了
And our goal in putting it on open source was really

382
00:21:34,058 --> 00:21:38,170
拉高无服务器平台的总体质量
to sort of raise the bar in terms of what's available to execute these days

383
00:21:38,170 --> 00:21:40,332
拉高无服务器平台的总体质量
as a serverless platform.

384
00:21:40,844 --> 00:21:45,468
对我们来说 重要的是要建立一个平台 不仅可以用于生产环境
It was important to us to sort of build a platform that is not only production-ready,

385
00:21:45,468 --> 00:21:47,213
还可以与全世界共享
and share it with the world,

386
00:21:47,538 --> 00:21:52,225
而且还可用于学术研究或一般性研究
but also to make it possible for academic research or research in general.

387
00:21:53,700 --> 00:21:56,708
也许因为出自 IBM 的研究机构 我们有点儿在意这个
Maybe coming out of IBM research, we cared about that a little too much.

388
00:21:56,708 --> 00:21:58,275
但是 这是有所回报的
But, it sort of paid off

389
00:21:58,275 --> 00:22:01,923
我知道有一些大学真的会在研究中使用 OpenWhisk
in that I know of universities that actually use OpenWhisk

390
00:22:01,923 --> 00:22:04,611
包括康奈尔和普林斯顿
for their own research - from Cornell to Princeton.

391
00:22:04,867 --> 00:22:07,494
我去过好几所大学
I've gone to several universities like Brown, Williams College, MIT, CMU,

392
00:22:07,494 --> 00:22:10,000
包括布朗大学、威廉姆斯学院、麻省理工、卡内基·梅隆
I've gone to several universities like Brown, Williams College, MIT, CMU,

393
00:22:10,000 --> 00:22:13,865
并且进行了一些讲座 鼓励学生去
and I've given talks with the purpose of encouraging students

394
00:22:13,865 --> 00:22:18,575
研究关于无服务器和服务器功能的问题
to really look at the problems around serverless and functions of the service.

395
00:22:18,575 --> 00:22:20,260
研究其工具、编程模型
The tooling, the programming model,

396
00:22:20,260 --> 00:22:22,800
并且使他们对技术感兴趣
and get them excited about the technology.

397
00:22:23,056 --> 00:22:24,250
向他们展示这样的一条道路：
Showing them that there's a path

398
00:22:24,250 --> 00:22:27,100
如果他们参与了 OpenWhisk 的开发
to where if they actually contribute to the open source project,

399
00:22:27,275 --> 00:22:30,325
IBM 的云计算平台会很快实装这些修改
it's picked up by IBM cloud functions and run in production,

400
00:22:30,325 --> 00:22:31,320
一般来说 在贡献提交之后的一周内就能实装
usually within a week.

401
00:22:31,448 --> 00:22:32,779
哇 这么快
Wow. That's so fast.

402
00:22:32,779 --> 00:22:34,502
有些人会很吃惊
That's been surprising to some people.

403
00:22:34,502 --> 00:22:36,739
这是个非常高效的过程
That's a super-efficient process.

404
00:22:37,315 --> 00:22:43,050
它证明了我们的开源开发方式的优越性
It's really a testament to how we develop a lot of technology in the open.

405
00:22:43,050 --> 00:22:47,930
我们没有采用保留部分闭源组件的“部分开源”模式
It's not an open core model where there are some components that have been held back.

406
00:22:48,250 --> 00:22:53,250
在 IBM 云上运行的 就是 Apache OpenWhisk 项目本身
What's running in the IBM cloud is really what's in the Apache OpenWhisk project.

407
00:22:53,250 --> 00:22:56,675
当你思索无服务器的未来
When you think about the future of serverless

408
00:22:56,675 --> 00:23:00,225
以及我们所选择的前进道路时
and the options we may have moving forward,

409
00:23:00,481 --> 00:23:04,833
你是否觉得 它们会不可避免地奔向开源
do you feel like they will inevitably be open?

410
00:23:04,833 --> 00:23:09,057
我想 最近对于开源的价值有一场激烈的争议
I think there's a raging debate these days about the value of open source,

411
00:23:09,057 --> 00:23:09,650
尤其是在云计算领域
especially in the cloud.

412
00:23:09,650 --> 00:23:10,255
尤其是在云计算领域
especially in the cloud.
是的 没错
Right, yeah.

413
00:23:10,255 --> 00:23:10,554
是的 没错
Right, yeah.

414
00:23:12,100 --> 00:23:15,125
说起人们转向云计算的原因
If you consider why people go to the cloud,

415
00:23:15,125 --> 00:23:17,625
或者他们可能会厌恶云计算的原因
or why they might have aversions to go into the cloud,

416
00:23:17,625 --> 00:23:20,358
我们就逃不开供应商锁定的问题
it's this whole concept of vendor lock-in

417
00:23:20,358 --> 00:23:23,584
丧失透明度
being ... losing transparency.

418
00:23:23,584 --> 00:23:29,223
开源在一定程度上缓解这些问题
Open source has played an important role in sort of alleviating some of these issues.

419
00:23:29,475 --> 00:23:31,266
然后再看看类似 Kubernetes 的服务
Then you look at efforts like Kubernetes,

420
00:23:31,266 --> 00:23:35,378
作为容器管理系统 它横扫了整个云计算领域
which is just gobbling up the cloud in terms of a container and management system.

421
00:23:35,570 --> 00:23:37,405
它多成功啊
How successful that's been.

422
00:23:37,981 --> 00:23:40,958
如果你正在做的事情涉及到容器
If you're doing something that even touches containers,

423
00:23:41,342 --> 00:23:44,825
鉴于它的主导地位 “保持闭源” 真的还是个可选项吗
does it even warrant having a discussion about keeping it closed source,

424
00:23:44,825 --> 00:23:46,739
鉴于它的主导地位 “保持闭源” 真的还是个可选项吗
giving how dominate it is?

425
00:23:47,123 --> 00:23:49,507
我倾向于认为 开放是有好处的
I tend to think that openness helps.

426
00:23:49,507 --> 00:23:53,875
从开发人员的角度来看 这很有吸引力
It's compelling from developers’ perspectives.

427
00:23:54,451 --> 00:23:59,050
对于未来的无服务器生态 及其工具、项目以及服务
When you think about the future of the serverless ecosystem and tools,

428
00:23:59,050 --> 00:24:01,239
对于未来的无服务器生态 及其工具、项目以及服务
and projects, and services that we're going to see,

429
00:24:01,533 --> 00:24:01,559
你怎么想？

430
00:24:01,559 --> 00:24:02,825
你怎么想？
what does that look like?

431
00:24:02,825 --> 00:24:04,825
对你来说 无服务器的未来是什么样的？
What does the future of serverless look like for you?

432
00:24:05,000 --> 00:24:09,051
我认为 它会让你越来越少思考底层技术
I think you start to think less and less about the underlying technology,

433
00:24:09,051 --> 00:24:12,523
越来越多地考虑编程体验以及围绕它的工具：
and it becomes more and more about the programming experience,

434
00:24:12,523 --> 00:24:13,885
越来越多地考虑编程体验以及围绕它的工具：
and the tooling around it.

435
00:24:13,885 --> 00:24:15,458
用于调试的工具
The tooling for debugging,

436
00:24:15,458 --> 00:24:17,475
用于部署管理的工具
the tooling for deployment management,

437
00:24:17,675 --> 00:24:20,279
用于性能分析的工具
the tooling for performance analysis,

438
00:24:20,535 --> 00:24:22,082
用于安全的工具
the tooling for security.

439
00:24:22,338 --> 00:24:25,740
我认为 这些全都非常重要
All of these are sort of fundamentally important, I think.

440
00:24:25,740 --> 00:24:29,276
函数运行的底层机制
The underlying mechanics of how you run your function,

441
00:24:29,276 --> 00:24:33,144
无论它们是在容器中运行 还是在一些未来的技术下运行
whether they run in a container or some future technology,

442
00:24:33,336 --> 00:24:36,744
也无论它们是在一个云上运行 还是在多个云上运行
whether you can run them on one cloud, or multi-cloud,

443
00:24:36,744 --> 00:24:39,271
我认为 这些都会被抽象化
I think fades into the background.

444
00:24:39,271 --> 00:24:42,583
有点儿像是 Kubernetes 在容器以及容器管理方面所做的事情
Kind of like what Kubernetes did for containers and container management.

445
00:24:42,775 --> 00:24:46,567
在最上方抽象出一层
In a similar way there's a layer that's going to come on top,

446
00:24:46,887 --> 00:24:51,255
这一层是“函数即服务”的函数层面 即“无服务器”的特性所在
which is the function of the service layering to give you that kind of serverless notion.

447
00:24:51,525 --> 00:24:55,625
在此之下是新的中间件 它起到非常重要的作用
Then it's really about what's the new middleware that you're putting on top of it.

448
00:24:55,625 --> 00:25:00,800
赋能授权给开发者 就是让他们能利用新的云计算技术的优势
How are you empowering developers to really take advantage of this new cloud computer

449
00:25:00,800 --> 00:25:04,325
与此同时 使他们体验良好 免于琐事折磨
and the toiling that you're going to put around it to make their experience pleasant.

450
00:25:04,325 --> 00:25:08,309
你说的授权赋能 会带来怎样的影响？
Yeah. What does that empowerment look like?

451
00:25:09,725 --> 00:25:12,357
一言以蔽之 就是提高效率
Efficiency, to put it in one word.

452
00:25:12,357 --> 00:25:17,214
“赋能”就是让开发者能专心做对他们来说有价值的事
It's the ability to just focus on the things that are of value to me as a developer,

453
00:25:17,214 --> 00:25:21,175
或者对公司有价值的事 如果他们为公司工作的话
or the value to my company if I'm working at a corporation.

454
00:25:21,650 --> 00:25:27,175
这样能更快地创新
It's more rapid innovation that, then, you beget out of that,

455
00:25:27,175 --> 00:25:28,800
因为你的脑细胞得到了解放
because you freed up your brain cells

456
00:25:28,800 --> 00:25:31,925
你不用去考虑基础设施怎样和如何伸缩
to not think about infrastructure and how things scale,

457
00:25:31,925 --> 00:25:34,725
也不必去考虑在硬件层面如何保障安全
and how things are secured at the hardware level.

458
00:25:34,725 --> 00:25:36,375
现在 你可以全心全意地创新
Now you can really innovate

459
00:25:36,375 --> 00:25:41,973
将脑力投入到更快的创新中去
in terms of rededicating that brain power to just innovating more rapidly,

460
00:25:42,175 --> 00:25:45,021
从而为你的终端用户带来更多的价值
delivering more value to your end-users.

461
00:25:45,021 --> 00:25:49,133
我想把这一切都归结于更高的效率
I'd lump that all into just better efficiency.

462
00:25:52,200 --> 00:25:55,160
Rodric Rabbah 是 OpenWhisk 的一位创始人
Rodric Rabbah is a founder of OpenWhisk.

463
00:25:59,192 --> 00:26:01,385
还记得我在这一期节目开始的时候所说的吗？
Remember what I said at the top of the show?

464
00:26:01,833 --> 00:26:07,673
互联网所基于的那种 传统的客户端 - 服务器模型并不会消失
That old client-server model that the internet is based on really isn't going anywhere.

465
00:26:08,200 --> 00:26:11,417
改变的是 - 我是说 彻底改变的是
What's changing, and I mean radically changing,

466
00:26:11,673 --> 00:26:14,251
我们对服务器的视角
is the way we think about those servers.

467
00:26:14,571 --> 00:26:16,901
所谓无服务器世界的理想
In a so-called serverless world,

468
00:26:17,150 --> 00:26:20,598
希望我们专注于代码本身
the hope is that we concentrate on the code itself

469
00:26:20,790 --> 00:26:22,994
而不用担心基础架构
and don't have to worry about infrastructure.

470
00:26:23,475 --> 00:26:25,923
但是 我们所选择的抽象等级
But the level of abstraction we select,

471
00:26:26,150 --> 00:26:30,070
以及如何保持对于未被抽象的工作的控制
and how we maintain control over work we don't abstract away,

472
00:26:30,454 --> 00:26:33,606
才是无服务器世界真正有趣的地方
are where that serverless world gets interesting.

473
00:26:34,650 --> 00:26:39,338
无服务器 最终 应当为开发人员赋能授权
Serverless should, ultimately, be about developer empowerment.

474
00:26:39,594 --> 00:26:43,642
使他们免于打补丁、进行伸缩和管理基础设施
The freedom from patching, scaling, and infrastructure management.

475
00:26:44,075 --> 00:26:45,550
但是 与此同时
But, at the same time,

476
00:26:45,869 --> 00:26:50,075
我们应当保持对整体图景的好奇心
we have to stay curious about how that big picture works

477
00:26:50,750 --> 00:26:53,525
即使某些任务遭到了抽象 也不该视而不见
even as we abstract some tasks away.

478
00:26:53,845 --> 00:26:57,025
自问 我要放弃哪些控制权
We're going to be asking, what controls am I giving up

479
00:26:57,500 --> 00:27:00,012
而我要收回的 又是哪些控制权？
and what controls do I want to take back?

480
00:27:02,060 --> 00:27:06,428
下一集是我们史诗般的第二季的大结局
Next episode it's our epic season two finale.

481
00:27:06,812 --> 00:27:09,013
《代码英雄》将会…
Command Line Heroes is taking...

482
00:27:12,700 --> 00:27:14,636
…踏上征途 前往火星
...a journey to Mars.

483
00:27:14,956 --> 00:27:20,860
我们将会了解 NASA 的火星探测器如何开始一场开源革命
We're learning how NASA's martian rover is kicking off an open source revolution of its own.

484
00:27:21,308 --> 00:27:26,747
并且我们将与 NASA 喷气推进实验室的 CTO 进行交流
And we're hanging out with the CTO at NASA's Jet Propulsion Laboratory.

485
00:27:26,747 --> 00:27:27,626
不用谢
No biggie.

486
00:27:27,939 --> 00:27:27,992
了解开源如何塑造太空探索的未来

487
00:27:27,992 --> 00:27:32,296
了解开源如何塑造太空探索的未来
To learn how open source is shaping the future of space exploration.

488
00:27:34,200 --> 00:27:38,725
与此同时 如果你想要更加深入地研究无服务器开发的问题
Meantime, if you want to dive deeper into the question of serverless development,

489
00:27:39,045 --> 00:27:41,813
或是在这一季里我们所探索过的任何主题
or any of the subjects we've explored this season,

490
00:27:42,197 --> 00:27:48,933
请访问 redhat.com/commandlineheroes 查看免费资源
check out the free resources waiting for you at redhat.com/commandlineheroes.

491
00:27:49,200 --> 00:27:49,996
在那里
While you're there,

492
00:27:50,124 --> 00:27:54,876
你甚至可以为我们自己的代码英雄游戏作出贡献
you can even contribute to our very own Command Line Heroes game.

493
00:27:55,324 --> 00:27:59,157
我是 Saron Yitbarek 感谢收听 编程不已
I'm Saron Yitbarek. Thanks for listening, and keep on coding.

